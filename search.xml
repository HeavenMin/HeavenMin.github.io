<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>地球两点大圆距离计算算法 (经度纬度)</title>
      <link href="/post/31c71a71/"/>
      <url>/post/31c71a71/</url>
      <content type="html"><![CDATA[<blockquote><p>The great-circle distance or orthodromic distance is the shortest distance between two points on the surface of a sphere, measured along the surface of the sphere (as opposed to a straight line through the sphere’s interior). The distance between two points in Euclidean space is the length of a straight line between them, but on the sphere there are no straight lines. In spaces with curvature, straight lines are replaced by geodesics. Geodesics on the sphere are circles on the sphere whose centers coincide with the center of the sphere, and are called great circles. –wiki</p></blockquote><p><strong>大圆距离</strong> (Great-circle distance) 是指从球面的一点到球面的另一点所经过的最短路径的长度。一般是连接这两个点较短的一条弧的长度。</p><p>地理位置两点之间的距离，就是这个大圆距离。想要计算这个大圆距离，并不能直接用类似在直角坐标系中通过勾股定理计算直线距离那样计算。地理位置信息一般采用经度和纬度，以弧度制度量。一般有两种算法来计算：</p><ul><li>如果将地球当作球体 (sphere)<ul><li>使用 半正矢公式 (Haversine formula)</li></ul></li><li>如果将地球当作椭球体 (ellipsoid)<ul><li>使用 Vincenty’s formulae</li></ul></li></ul><p>Vincenty’s formulae 由于将地球当作椭球体来计算，会有更高的精度， 但是计算效率会比Haversine formula略低。</p><h2 id="Haversine-formula-半正矢公式"><a href="#Haversine-formula-半正矢公式" class="headerlink" title="Haversine formula (半正矢公式)"></a>Haversine formula (半正矢公式)</h2><p>以下是一个通过 Haversine formula 用已知两点经度纬度的前提下，计算出大圆距离的代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">__author__ = <span class="string">'Min'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">EARTH_RADUIS = <span class="number">6378.137</span>    <span class="comment"># kilometre</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDistance</span><span class="params">(lat1, long1, lat2, long2, decimal_digits=<span class="number">6</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Function to get two-point distance by longtitude and latitude</span></span><br><span class="line"><span class="string">    average runtime for this function is about 0.000006 sec.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Eample:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-35.308228, 149.124358, -33.868883, 151.209301)</span></span><br><span class="line"><span class="string">    249.349728</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, -33.868883, 151.209301)</span></span><br><span class="line"><span class="string">    714.257887</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, 31.231981, 121.492631)</span></span><br><span class="line"><span class="string">    8063.801696</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, 31.231981, 121.492631, 3)</span></span><br><span class="line"><span class="string">    8063.802</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> abs(lat1) &lt;= <span class="number">90</span> <span class="keyword">and</span> abs(lat2) &lt;= <span class="number">90</span>, <span class="string">"invalid latitude"</span></span><br><span class="line">    <span class="keyword">assert</span> abs(long1) &lt;= <span class="number">180</span> <span class="keyword">and</span> abs(long2) &lt;= <span class="number">180</span>, <span class="string">"invalid longtigude"</span></span><br><span class="line">    rad_lat1 = math.radians(lat1)</span><br><span class="line">    rad_lat2 = math.radians(lat2)</span><br><span class="line">    rad_long1 = math.radians(long1)</span><br><span class="line">    rad_long2 = math.radians(long2)</span><br><span class="line">    a = rad_lat1 - rad_lat2</span><br><span class="line">    b = rad_long1 - rad_long2</span><br><span class="line">    s = (<span class="number">2</span> * math.asin(math.sqrt(math.pow(math.sin(a / <span class="number">2</span>), <span class="number">2</span>) +</span><br><span class="line">         math.cos(rad_lat1) * math.cos(rad_lat2) *</span><br><span class="line">         math.pow(math.sin(b / <span class="number">2</span>), <span class="number">2</span>))))</span><br><span class="line">    distance = s * EARTH_RADUIS</span><br><span class="line">    <span class="keyword">return</span> round(distance,decimal_digits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Canberra to Sydney</span></span><br><span class="line">    print(getDistance(<span class="number">-35.308228</span>, <span class="number">149.124358</span>, <span class="number">-33.868883</span>, <span class="number">151.209301</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Melbourne to Sydney</span></span><br><span class="line">    print(getDistance(<span class="number">-37.813971</span>, <span class="number">144.962921</span>, <span class="number">-33.868883</span>, <span class="number">151.209301</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Melbourne to Shanghai</span></span><br><span class="line">    print(getDistance(<span class="number">-37.813971</span>, <span class="number">144.962921</span>, <span class="number">31.231981</span>, <span class="number">121.492631</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure></p><p>通过测试数据得知:</p><table><thead><tr><th>From</th><th>To</th><th>Distance (km)</th></tr></thead><tbody><tr><td>堪培拉</td><td>悉尼</td><td>249.349728</td></tr><tr><td>墨尔本</td><td>悉尼</td><td>714.257887</td></tr><tr><td>墨尔本</td><td>上海</td><td>8063.801696</td></tr></tbody></table><p>还是比较精确的。 在不需要太精准的情况，可以使用Haversine formula (半正矢公式)来计算地球上两点之间的大圆距离。</p><h2 id="Vincenty’s-formulae"><a href="#Vincenty’s-formulae" class="headerlink" title="Vincenty’s formulae"></a>Vincenty’s formulae</h2><p>-TODO</p><hr><p>Author: <code>Min Gao</code></p>]]></content>
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> great-circle-distance </tag>
            
            <tag> algorithm </tag>
            
            <tag> python </tag>
            
            <tag> geospatial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ultimate Syntax Cheat Sheet</title>
      <link href="/post/3001c9cc/"/>
      <url>/post/3001c9cc/</url>
      <content type="html"><![CDATA[<p>The Ultimate Programming Language Syntax Cheat Sheet - 终极编程语法速查<br>Now include language: <code>python3</code> <code>swift4</code>  </p><h2 id="Operators-运算符"><a href="#Operators-运算符" class="headerlink" title="Operators - 运算符"></a>Operators - 运算符</h2><h3 id="Arithmetic-operators-算术运算符"><a href="#Arithmetic-operators-算术运算符" class="headerlink" title="Arithmetic operators - 算术运算符"></a>Arithmetic operators - 算术运算符</h3><p><code>swift</code></p><table><thead><tr><th>加</th><th>减</th><th>乘</th><th>除</th><th>整除</th><th>取模</th><th>幂</th></tr></thead><tbody><tr><td> +</td><td>-</td><td>*</td><td>/</td><td>N/A</td><td>%</td><td>N/A</td></tr></tbody></table><p><code>python3</code></p><table><thead><tr><th>加</th><th>减</th><th>乘</th><th>除</th><th>整除</th><th>取模</th><th>幂</th></tr></thead><tbody><tr><td> +</td><td>-</td><td>*</td><td>/</td><td>//</td><td>%</td><td>**</td></tr></tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><code>swift</code></p><table><thead><tr><th>与</th><th>或</th><th>异或</th><th>反</th><th>左移</th><th>右移</th></tr></thead><tbody><tr><td> &amp;</td><td>\</td><td></td><td>^</td><td>~</td><td>&lt;&lt;</td><td>&gt;&gt;</td></tr></tbody></table><p><code>python3</code></p><table><thead><tr><th>与</th><th>或</th><th>异或</th><th>反</th><th>左移</th><th>右移</th></tr></thead><tbody><tr><td> &amp;</td><td>\</td><td></td><td>^</td><td>~</td><td>&lt;&lt;</td><td>&gt;&gt;</td></tr></tbody></table><h3 id="逻辑运算符-amp-成员运算符-amp-身份运算符"><a href="#逻辑运算符-amp-成员运算符-amp-身份运算符" class="headerlink" title="逻辑运算符 &amp; 成员运算符 &amp; 身份运算符"></a>逻辑运算符 &amp; 成员运算符 &amp; 身份运算符</h3><p><code>swift</code></p><table><thead><tr><th>&amp;&amp;</th><th>\</th><th>\</th><th></th><th>!</th><th>in</th><th>N/A</th><th>is</th><th>N/A</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p><code>python3</code></p><table><thead><tr><th>and</th><th>or</th><th>not</th><th>in</th><th>not in</th><th>is</th><th>is not</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h2 id="String-format-amp-Output-amp-input-输入输出"><a href="#String-format-amp-Output-amp-input-输入输出" class="headerlink" title="String format &amp; Output &amp; input - 输入输出"></a>String format &amp; Output &amp; input - 输入输出</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">let</span> greet = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">let</span> language = <span class="string">"swift"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"<span class="subst">\(greet)</span> from <span class="subst">\(language)</span>"</span>)  <span class="comment">// Interpolation | output</span></span><br><span class="line"><span class="keyword">let</span> output = greet + language</span><br><span class="line"><span class="comment">// TODO (heaven) input</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">greet = <span class="string">'Hello'</span></span><br><span class="line">language = <span class="string">'python3'</span></span><br><span class="line">print(<span class="string">'&#123;greet&#125; from &#123;language&#125;'</span>.format(greet = <span class="string">'Hello'</span>, language = <span class="string">'python3'</span>))   <span class="comment"># output</span></span><br><span class="line">output = greet + language</span><br><span class="line">my_input = input(<span class="string">"Input something:"</span>)    <span class="comment"># input</span></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br><span class="line">print(<span class="string">r'\\\all can show'</span>)  <span class="comment">#字符串前加r 可表示非转义的原始字符串</span></span><br></pre></td></tr></table></figure><blockquote><p><strong><a href="https://docs.python.org/3/library/string.html#formatstrings" target="_blank" rel="noopener">python string format</a></strong></p></blockquote><h2 id="Data-types-数据类型"><a href="#Data-types-数据类型" class="headerlink" title="Data types - 数据类型"></a>Data types - 数据类型</h2><h3 id="basic-data-types-基本数据类型"><a href="#basic-data-types-基本数据类型" class="headerlink" title="basic data types - 基本数据类型"></a>basic data types - 基本数据类型</h3><p><code>swift</code></p><table><thead><tr><th>INT</th><th>UINT</th><th>FLOAT</th><th>DOUBLE</th><th>BOOL</th><th>STRING</th><th>CHARACTER</th><th>OPTIONAL</th><th>COMPLEX</th></tr></thead><tbody><tr><td> Int</td><td>UInt</td><td>Float</td><td>Double</td><td>Bool</td><td>String</td><td>Character</td><td>Optional</td><td>N/A</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_int = <span class="number">1</span>  <span class="comment">// var my_int: Int = 1</span></span><br><span class="line"><span class="keyword">var</span> my_uint: <span class="type">UInt</span> = <span class="number">1</span>    <span class="comment">// UInt</span></span><br><span class="line"><span class="keyword">var</span> my_float: <span class="type">Float</span> = <span class="number">3.14</span>    <span class="comment">// Float</span></span><br><span class="line"><span class="keyword">var</span> my_double = <span class="number">3.14</span>    <span class="comment">// Double</span></span><br><span class="line"><span class="keyword">var</span> my_bool = <span class="literal">true</span> || <span class="literal">false</span>    <span class="comment">// Bool</span></span><br><span class="line"><span class="keyword">var</span> my_string = <span class="string">"string"</span>    <span class="comment">// String</span></span><br><span class="line"><span class="keyword">var</span> my_character: <span class="type">Character</span> = <span class="string">"a"</span></span><br><span class="line"><span class="keyword">var</span> my_int_optional: <span class="type">Int</span>? = <span class="literal">nil</span>    <span class="comment">// doesn't contain a value</span></span><br><span class="line"><span class="comment">// COMPLEX N/A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// about optional</span></span><br><span class="line"><span class="keyword">var</span> my_nil = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line"><span class="keyword">let</span> unwrapperd_my_int_optional = my_int_optional! <span class="comment">// force unwrapping</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> my_int_optional = my_int_optional &#123; <span class="comment">// optional binding</span></span><br><span class="line">    <span class="built_in">print</span>(my_int_optional)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"no value."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nil coalescing</span></span><br><span class="line"><span class="keyword">var</span> mustHaveResult = my_int_optional ?? <span class="number">0</span></span><br><span class="line"><span class="comment">// optional chaining</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="type">String</span>? = ...</span><br><span class="line"><span class="keyword">let</span> y = x?.foo()?.bar?.z</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed properties   实时变化的变量</span></span><br><span class="line"><span class="comment">// in struct Locaiton</span></span><br><span class="line"><span class="keyword">var</span> disToOrigin: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>((x * x + y * y).squareRoot().rounded())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if need setter, using:     实时变化的变量同时更改其他变量</span></span><br><span class="line"><span class="keyword">var</span> disToOrigin: <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>((x * x + y * y).squareRoot().rounded())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> &#123;</span><br><span class="line">        <span class="comment">// using newValue to set value of x, y here (important)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Closures with property initialization 只在初始化时候执行一次</span></span><br><span class="line"><span class="keyword">var</span> someProperty: <span class="type">Type</span> = &#123;</span><br><span class="line">    <span class="comment">// construct the value of someProperty here</span></span><br><span class="line">    <span class="keyword">return</span> &lt;the constructed value&gt;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// Besides, lazy var variable_name 能定义一个要用到时候才计算的变量</span></span><br><span class="line"><span class="comment">// willSet and didSet, besides, willSet and didSet observers are not called when a property is set during initialization</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Level</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> highestLvl = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> lvl: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> boss: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> unlocked: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> unlocked &amp;&amp; lvl &gt; <span class="type">Level</span>.highestLvl &#123;</span><br><span class="line">                <span class="type">Level</span>.highestLvl = lvl</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>python3</code></p><table><thead><tr><th>INT</th><th>UINT</th><th>FLOAT</th><th>DOUBLE</th><th>BOOL</th><th>STRING</th><th>CHARACTER</th><th>OPTIONAL</th><th>COMPLEX</th></tr></thead><tbody><tr><td> int</td><td>N/A</td><td>float</td><td>N/A</td><td>bool</td><td>str</td><td>N/A</td><td>N/A</td><td>complex</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">my_int = <span class="number">1</span></span><br><span class="line"><span class="comment"># UINT N/A</span></span><br><span class="line">my_float = <span class="number">3.14</span></span><br><span class="line"><span class="comment"># DOUBLE N/A</span></span><br><span class="line">my_bool = <span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span> <span class="comment"># and | or | not</span></span><br><span class="line">my_string = <span class="string">"string"</span> <span class="comment"># 'string' | r'show\'</span></span><br><span class="line"><span class="comment"># CHARACTER N/A</span></span><br><span class="line"><span class="comment"># OPTIONAL N/A</span></span><br><span class="line">my_complex_num = <span class="number">1</span> + <span class="number">2j</span>    <span class="comment"># complex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br><span class="line">my_none = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="Strings-字符串"><a href="#Strings-字符串" class="headerlink" title="Strings 字符串"></a>Strings 字符串</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">"abcd"</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> string &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</span><br><span class="line">&#125;</span><br><span class="line">string[string.startIndex] == <span class="string">"a"</span></span><br><span class="line">string[string.index(before: string.endIndex)] == <span class="string">"d"</span></span><br><span class="line">string[string.index(string.startIndex, offsetBy: <span class="number">1</span>)] == <span class="string">"b"</span></span><br><span class="line">string[string.index(string.endIndex, offsetBy: -<span class="number">2</span>)] == <span class="string">"c"</span></span><br><span class="line">string[string.index(string.startIndex, offsetBy: <span class="number">1</span>)..&lt;string.index(string.startIndex, offsetBy: <span class="number">3</span>)] == <span class="string">"bc"</span></span><br><span class="line"><span class="type">Array</span>(string) <span class="comment">// ["a", "b", "c", "d"]</span></span><br><span class="line"><span class="comment">// TODO string replace in swift</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'abcd'</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> string:</span><br><span class="line">    print(c)</span><br><span class="line">string[<span class="number">0</span>] == <span class="string">'a'</span></span><br><span class="line">string[<span class="number">-1</span>] == <span class="string">'d'</span></span><br><span class="line">string[<span class="number">1</span>] == <span class="string">'b'</span></span><br><span class="line">string[<span class="number">-2</span>] == <span class="string">'c'</span></span><br><span class="line">string[<span class="number">1</span>:<span class="number">3</span>] == <span class="string">'bc'</span></span><br><span class="line">list(string) <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br><span class="line">my_string.replace(<span class="string">'s'</span>, <span class="string">'a'</span>)  <span class="comment"># "atring"</span></span><br></pre></td></tr></table></figure><h3 id="lists-amp-Arrays-列表-amp-数组"><a href="#lists-amp-Arrays-列表-amp-数组" class="headerlink" title="lists &amp; Arrays - 列表 &amp; 数组"></a>lists &amp; Arrays - 列表 &amp; 数组</h3><p>ordered collections of values<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment">// [Int]</span></span><br><span class="line">my_list[..&lt;i] + my_list[i...] == my_list</span><br><span class="line">my_list.<span class="built_in">contains</span>(<span class="number">4</span>)    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> empty_list: [<span class="type">Int</span>] = []</span><br><span class="line">my_list.<span class="built_in">count</span>   <span class="comment">// 4</span></span><br><span class="line">my_list.append(<span class="number">5</span>)</span><br><span class="line">my_list.append(contentsOf: [<span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line">my_list.insert(<span class="number">0</span>, at: <span class="number">0</span>)</span><br><span class="line"><span class="comment">// N/A  do not have remove specific element by element</span></span><br><span class="line">my_list.removeLast()</span><br><span class="line">my_list.remove(at: <span class="number">0</span>)</span><br><span class="line">my_list.removeAll()</span><br><span class="line">my_list.index(of: <span class="number">1</span>)</span><br><span class="line"><span class="comment">// N/A 没有数一个元素个数的内定函数</span></span><br><span class="line">my_list.<span class="built_in">sort</span>() &#123; $<span class="number">0</span> &lt; $<span class="number">1</span> &#125;</span><br><span class="line">my_list.<span class="built_in">reverse</span>()</span><br><span class="line"><span class="comment">// swift 不需要浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> my_str_list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">my_str_list.joined(separator: <span class="string">""</span>)   <span class="comment">// "abc"</span></span><br><span class="line"><span class="keyword">let</span> range_list = <span class="type">Array</span>(<span class="number">0</span>..&lt;<span class="number">10</span>)  <span class="comment">// create [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Looping techniques 循环技巧</span></span><br><span class="line"><span class="keyword">for</span> (i, v) <span class="keyword">in</span> my_list.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> question = [<span class="string">"qa"</span>, <span class="string">"qb"</span>, <span class="string">"qc"</span>]</span><br><span class="line"><span class="keyword">let</span> answer = [<span class="string">"aa"</span>, <span class="string">"ab"</span>m <span class="string">"ac"</span>]</span><br><span class="line"><span class="keyword">for</span> (q, a) <span class="keyword">in</span> <span class="built_in">zip</span>(question, answer) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Question is <span class="subst">\(question)</span>. Answer is <span class="subst">\(answer)</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line">my_list.isEmpty</span><br><span class="line">my_list.first</span><br><span class="line">my_list.last</span><br><span class="line">my_list.<span class="built_in">min</span>()</span><br><span class="line">my_list.<span class="built_in">max</span>()</span><br><span class="line"><span class="keyword">let</span> list_slice = my_list[<span class="number">1</span>...<span class="number">2</span>]  <span class="comment">// using list_slice[1], list_slice[2]</span></span><br><span class="line"><span class="keyword">let</span> list_slice = <span class="type">Array</span>(my_list[<span class="number">1</span>...<span class="number">2</span>]) <span class="comment">// using list_slice[0], list_slice[1]</span></span><br><span class="line">my_list.swapAt(<span class="number">0</span>, <span class="number">3</span>)    <span class="comment">// 交换位置</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">my_list[:i] + my_list[i:] == my_list    <span class="comment"># True     切片</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">in</span> my_list    <span class="comment"># &gt;&gt;&gt; True</span></span><br><span class="line">empty_list = []</span><br><span class="line">len(my_list)    <span class="comment"># &gt;&gt;&gt; 4</span></span><br><span class="line">my_list.append(<span class="number">5</span>)   <span class="comment"># my_list = [1, 2, 3, 4, 5]</span></span><br><span class="line">my_list.extend([<span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line">my_list.insert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">my_list.remove(<span class="number">1</span>) <span class="comment"># equal to del my_list[0] 通过索引删除</span></span><br><span class="line">my_list.pop()   <span class="comment"># pop the last element</span></span><br><span class="line">my_list.pop(<span class="number">0</span>)  <span class="comment"># pop the specific element</span></span><br><span class="line">my_list.clear() <span class="comment"># equal to  del my_list[:]</span></span><br><span class="line">my_list.index(<span class="number">1</span>)</span><br><span class="line">my_list.count(<span class="number">1</span>)</span><br><span class="line">my_list.sort(key=<span class="keyword">lambda</span> x:x)</span><br><span class="line">my_list.reverse()</span><br><span class="line">my_list.copy()  <span class="comment">#equal to a[:]  浅拷贝</span></span><br><span class="line">my_str_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="string">''</span>.join(my_str_list)    <span class="comment"># 'abc'</span></span><br><span class="line">range_list = list(range(<span class="number">10</span>)) <span class="comment">#create [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Looping techniques 循环技巧</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(my_list):</span><br><span class="line">    print(i, v)</span><br><span class="line"></span><br><span class="line">question = [<span class="string">'qa'</span>, <span class="string">'qb'</span>, <span class="string">'qc'</span>]</span><br><span class="line">answer = [<span class="string">'aa'</span>, <span class="string">'ab'</span>, <span class="string">'ac'</span>]</span><br><span class="line"><span class="keyword">for</span> q, a <span class="keyword">in</span> zip(question, answer):</span><br><span class="line">    print(<span class="string">'Question is &#123;0&#125;. Answer is &#123;1&#125;.'</span>.format(q, a))</span><br></pre></td></tr></table></figure><h3 id="tuples-元组"><a href="#tuples-元组" class="headerlink" title="tuples - 元组"></a>tuples - 元组</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// swift 元组可以修改其中元素</span></span><br><span class="line"><span class="keyword">let</span> my_tuple = (<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">// let my_tuple: (Int, Int) = (1, 2)</span></span><br><span class="line"><span class="keyword">let</span> my_tuple_element_0 = my_tuple.<span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> my_tuple_element_1 = my_tuple.<span class="number">1</span></span><br><span class="line"><span class="comment">// N/A do not have one element tuple in swift</span></span><br><span class="line"><span class="keyword">let</span> empty_tuple: (<span class="type">Int</span>, <span class="type">Int</span>)? = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">let</span> (a, <span class="number">_</span>) = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// swift can name the indifidual parts of a tuple</span></span><br><span class="line"><span class="keyword">let</span> my_coordinates = (x: <span class="number">1</span>, y: <span class="number">2</span>)   <span class="comment">// or let my_coordinates: (x: Int, y: Int) = (1, 2)</span></span><br><span class="line"><span class="keyword">let</span> my_x = my_coordinates.x</span><br><span class="line"><span class="keyword">let</span> my_y = my_coordinates.y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="comment"># python3 元组一旦设定无法更改其中元素</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">my_tuple_element_0 = my_tuple[<span class="number">0</span>]</span><br><span class="line">my_tuple_element_1 = my_tuple[<span class="number">1</span>]</span><br><span class="line">only_one_element_tuple = (<span class="number">1</span>,)</span><br><span class="line">empty_tuple = ()</span><br><span class="line">a, _ = my_tuple</span><br><span class="line"></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br></pre></td></tr></table></figure><h3 id="sets-集合"><a href="#sets-集合" class="headerlink" title="sets - 集合"></a>sets - 集合</h3><p>unordered collecition of unique values<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_set: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">my_set.<span class="built_in">contains</span>(<span class="number">1</span>)    <span class="comment">// true</span></span><br><span class="line">my_set.insert(<span class="number">3</span>)</span><br><span class="line">my_set.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> empty_set: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = []</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">my_set = set([<span class="number">1</span>,<span class="number">2</span>])    <span class="comment"># + - &amp; | ^</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> my_set     <span class="comment"># True</span></span><br><span class="line">my_set.add(<span class="number">3</span>)</span><br><span class="line">my_set.remove(<span class="number">3</span>)</span><br><span class="line">empty_set = set()</span><br><span class="line"></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br><span class="line">a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'abracadabra'</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'abc'</span>&#125; <span class="comment"># &gt;&gt;&gt; &#123;'r', 'd'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dictionaries-字典"><a href="#dictionaries-字典" class="headerlink" title="dictionaries - 字典"></a>dictionaries - 字典</h3><p>unordered collection of key-value pairs<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_dic = [<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> my_dic: [<span class="type">String</span>: <span class="type">Int</span>] = [<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> empty_dic: [<span class="type">String</span>: <span class="type">Int</span>] = [:]</span><br><span class="line">my_dic.keys.<span class="built_in">contains</span>(<span class="string">"a"</span>)</span><br><span class="line">my_dic[<span class="string">"a"</span>] ?? <span class="number">0</span></span><br><span class="line">my_dic[<span class="string">"c"</span>] = <span class="number">3</span></span><br><span class="line">my_dic.removeValue(forKey: <span class="string">"a"</span>)    <span class="comment">// same as my_dic["a"] = nil</span></span><br><span class="line">my_dic.keys</span><br><span class="line">my_dic.values</span><br><span class="line"><span class="type">Array</span>(my_dic)</span><br><span class="line"><span class="comment">// TODO  通过 (key, value) 构建字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环技巧</span></span><br><span class="line"><span class="keyword">for</span> (k, v) <span class="keyword">in</span> my_dic &#123;</span><br><span class="line">    <span class="built_in">print</span>(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">my_dic = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">my_dic_another_init = dict(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line">empty_dic = &#123;&#125;</span><br><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> my_dic   <span class="comment"># &gt;&gt;&gt; True</span></span><br><span class="line">my_dic.get(<span class="string">'a'</span>, <span class="string">"default_val"</span>)    <span class="comment"># &gt;&gt;&gt; 1</span></span><br><span class="line">my_dic[<span class="string">'c'</span>] = <span class="number">3</span></span><br><span class="line">my_dic.pop(<span class="string">'a'</span>)    <span class="comment"># &gt;&gt;&gt; 1  and del the key 'a'</span></span><br><span class="line">my_dic.keys()   <span class="comment">#get keys</span></span><br><span class="line">my_dic.values() <span class="comment">#get values</span></span><br><span class="line">my_dic.items()  <span class="comment">#get (key, value)</span></span><br><span class="line">dict(my_dic.items())    <span class="comment">#通过 (key, value) 构建字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环技巧</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> my_dic.items():</span><br><span class="line">    print(k, v)</span><br></pre></td></tr></table></figure><h2 id="Data-structure-数据结构"><a href="#Data-structure-数据结构" class="headerlink" title="Data structure - 数据结构"></a>Data structure - 数据结构</h2><h3 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack - 栈"></a>stack - 栈</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">stack = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">stack.append(<span class="number">4</span>)</span><br><span class="line">num = stack.pop()   <span class="comment"># &gt;&gt;&gt; 4</span></span><br></pre></td></tr></table></figure><h3 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue - 队列"></a>queue - 队列</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="comment"># double ended queue</span></span><br><span class="line"><span class="comment"># deque 在首尾两端快速插入和删除而设计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue  = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">queue.append(<span class="number">4</span>)</span><br><span class="line">queue.popleft()</span><br></pre></td></tr></table></figure><h2 id="Control-flow-流程控制"><a href="#Control-flow-流程控制" class="headerlink" title="Control flow - 流程控制"></a>Control flow - 流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x &gt; 0"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x &lt; 0"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"x == 0"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三元运算符</span></span><br><span class="line"><span class="keyword">let</span> comparison = x &gt; <span class="number">0</span> ? <span class="string">" &gt; 0"</span> : <span class="string">" &lt;= 0"</span></span><br><span class="line"><span class="comment">// guard</span></span><br><span class="line"><span class="comment">// guard is kind of else first if let</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(str: String?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> v = str <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use v to do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'x &gt; 0'</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'x &gt; 0'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'x == 0'</span>)</span><br><span class="line"><span class="comment"># 三元运算符</span></span><br><span class="line">comparison = <span class="string">' &gt; 0'</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'&lt;= 0'</span></span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="number">10</span> &#123;   <span class="comment">// or 0  ... 9</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="number">10</span> <span class="keyword">where</span> i % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">    sum += i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list_a = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">for</span> (i, <span class="built_in">c</span>) <span class="keyword">in</span> list_a.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(i, <span class="built_in">c</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):   <span class="comment"># [1-9]</span></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        sum += i</span><br><span class="line"></span><br><span class="line">list_a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(list_a):</span><br><span class="line">    print(i, c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br><span class="line"><span class="comment"># for - else</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % x == <span class="number">0</span>:</span><br><span class="line">            print(n, <span class="string">'equals &#123;x&#125; * &#123;y&#125;'</span>.format(x = x, y = n // x))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'&#123;n&#125; is a prime number'</span>.format(n = n))</span><br><span class="line"><span class="comment"># 循环可以有一个 else 子句；它在循环迭代完整个列表（对于 for ）或执行条件为 false （对于 while ）时执行，但循环被 break 中止的情况下不会执行。循环的 else 子句在未出现 break 时运行。</span></span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123;</span><br><span class="line">    <span class="comment">// Do something in loop</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="comment">// Do something in loop</span></span><br><span class="line">&#125; <span class="keyword">while</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"string"</span></span><br><span class="line"><span class="keyword">var</span> mode = <span class="string">"default"</span></span><br><span class="line"><span class="keyword">switch</span> mode &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"l"</span>:</span><br><span class="line">    <span class="built_in">print</span>(string.lowercased())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"u"</span>:</span><br><span class="line">    <span class="built_in">print</span>(string.uppercased())</span><br><span class="line"><span class="keyword">case</span> <span class="string">"c"</span>:</span><br><span class="line">    <span class="built_in">print</span>(string.capitalized)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(string)   <span class="comment">// if doing nothing, use break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="keyword">let</span> hourOfDay = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> timeOfDay: <span class="type">String</span></span><br><span class="line"><span class="keyword">switch</span> hourOfDay &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">11</span>:</span><br><span class="line">  timeOfDay = <span class="string">"Morning"</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>...<span class="number">16</span>:</span><br><span class="line">  timeOfDay = <span class="string">"Afternoon"</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">17</span>..&lt;<span class="number">24</span>:</span><br><span class="line">  timeOfDay = <span class="string">"Evening"</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  timeOfDay = <span class="string">"INVALID HOUR!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">10</span></span><br><span class="line"><span class="keyword">switch</span> number &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">_</span> <span class="keyword">where</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Even"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Odd"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coordinates = (x: <span class="number">1</span>, y: <span class="number">2</span>, z: <span class="number">3</span>)</span><br><span class="line"><span class="keyword">switch</span> coordinates &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y, <span class="number">_</span>) <span class="keyword">where</span> y == x:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Along the y = x line."</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y, <span class="number">_</span>) <span class="keyword">where</span> y == x * x:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"Along the y = x^2 line."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">string_mode</span><span class="params">(string, mode=<span class="string">'default'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'l'</span>: str.lower,</span><br><span class="line">        <span class="string">'u'</span>: str.upper,</span><br><span class="line">        <span class="string">'c'</span>: str.capitalize,</span><br><span class="line">        <span class="string">'t'</span>: str.title,</span><br><span class="line">        <span class="string">'s'</span>: str.swapcase</span><br><span class="line">    &#125;.get(mode, <span class="keyword">lambda</span> s:s)(string)</span><br></pre></td></tr></table></figure><h3 id="enumeration-枚举"><a href="#enumeration-枚举" class="headerlink" title="enumeration - 枚举"></a>enumeration - 枚举</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> monday, tuesday, wednesday, thursday, friday</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> monday = <span class="number">1</span>, tuesday, wednesday, thursday, friday</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mon = <span class="type">Weekday</span>.monday.rawValue  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> fri = <span class="type">Weekday</span>(rawValue: <span class="number">5</span>)!   <span class="comment">// friday == Weekday.friday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// swift enum, each state can have its own "associated data"</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FastFoodMenuItem</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> hamburger(numerOfPatties: <span class="type">Int</span>)</span><br><span class="line"><span class="keyword">case</span> fires(size: <span class="type">FryOrderSize</span>)</span><br><span class="line"><span class="keyword">case</span> drink(<span class="type">String</span>, ounces: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">FryOrderSize</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> large, small</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// enum can also be used to create a group of related type methods.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(of number: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>...number).<span class="built_in">reduce</span>(<span class="number">1</span>, *)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   <span class="comment">// using Math.factorial(of: 6) to use</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weekday</span><span class="params">(Enum)</span>:</span></span><br><span class="line">    monday = <span class="number">1</span></span><br><span class="line">    tuesday = <span class="number">2</span></span><br><span class="line">    wednesday = <span class="number">3</span></span><br><span class="line">    thursday = <span class="number">4</span></span><br><span class="line">    friday = <span class="number">5</span></span><br><span class="line">mon = Weekday.monday.value</span><br><span class="line">fri = Weekday(<span class="number">5</span>)    <span class="comment"># Weekday.friday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### SPECIFIC ####</span></span><br><span class="line"><span class="comment"># another way to call Enum</span></span><br><span class="line">Weekday = Enum(<span class="string">'Weekday'</span>, <span class="string">'monday tuesday wednesday thursday friday'</span>)</span><br></pre></td></tr></table></figure><h3 id="Iterators-迭代器"><a href="#Iterators-迭代器" class="headerlink" title="Iterators - 迭代器"></a>Iterators - 迭代器</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// can not iterate tuples</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> [<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>].keys &#123;</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"123"</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>):</span><br><span class="line">    print(element)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> &#123;<span class="string">'one'</span>:<span class="number">1</span>, <span class="string">'two'</span>:<span class="number">2</span>&#125;:</span><br><span class="line">    print(key)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">"123"</span>:</span><br><span class="line">    print(char)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">"myfile.txt"</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="break-and-continue"><a href="#break-and-continue" class="headerlink" title="break and continue"></a>break and continue</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line">def need_to_do_later()&#123;</span><br><span class="line">    <span class="comment">// TODO (coder name): info</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmptyCalss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">need_to_do_later</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># TODO (coder name): info</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmptyCalss</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Functions-Defining-函数定义"><a href="#Functions-Defining-函数定义" class="headerlink" title="Functions Defining - 函数定义"></a>Functions Defining - 函数定义</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">my_function</span><span class="params">(arg1_outname arg1: Int, arg2_o arg2: String = <span class="string">"default_val"</span>)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// return something Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy-in copy-out and value result</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">(<span class="number">_</span> value: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    value += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// after that using &amp; to make clear at the call site</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="number">5</span></span><br><span class="line">increment(&amp;val)    <span class="comment">// using copy-in copy-out</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">noReture</span><span class="params">()</span></span> -&gt; <span class="type">Never</span> &#123;</span><br><span class="line">    <span class="comment">//do something here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(arg1, arg2=<span class="string">'default_val'</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="string">""" docstring """</span>   <span class="comment"># using print(my_function.__doc__) to show doc</span></span><br><span class="line">    <span class="keyword">return</span> <span class="comment"># return something</span></span><br><span class="line"><span class="comment"># *args 接受元组 或 list， **kw 接受字典</span></span><br><span class="line"><span class="comment"># 函数注解 - 一般没有意义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_num</span><span class="params">(a: int, b: int=<span class="number">5</span>)</span> -&gt; int:</span></span><br><span class="line">    print(add_two_num.__annotations__)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">range(<span class="number">3</span>, <span class="number">6</span>) == range(*[<span class="number">3</span>, <span class="number">6</span>])   <span class="comment">#same as **kw</span></span><br></pre></td></tr></table></figure><h3 id="built-in-functions-内置函数"><a href="#built-in-functions-内置函数" class="headerlink" title="built-in functions - 内置函数"></a>built-in functions - 内置函数</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line">list.<span class="built_in">count</span></span><br><span class="line">list.sorted() &#123; $<span class="number">0</span> &lt; $<span class="number">1</span> &#125;</span><br><span class="line"><span class="type">UnicodeScalar</span>(<span class="string">"A"</span>)</span><br><span class="line"><span class="type">String</span>(describing: <span class="type">UnicodeScalar</span>(<span class="number">65</span>)!)  <span class="comment">// "\u&#123;041&#125;"  这里用16进制 65 = 0x41</span></span><br><span class="line"><span class="comment">// N/A  do not need dir</span></span><br><span class="line"><span class="type">String</span>(dec_num, radix: <span class="number">2</span>)   <span class="comment">// 10进制 转 2进制</span></span><br><span class="line"><span class="type">Int</span>(bin_str, radix: <span class="number">2</span>)<span class="comment">// 2进制 转 10进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">len(list)</span><br><span class="line">sorted(list, key=<span class="keyword">lambda</span> x:x)</span><br><span class="line">ord(<span class="string">'A'</span>)    <span class="comment"># &gt;&gt;&gt; 65</span></span><br><span class="line">chr(<span class="number">65</span>)    <span class="comment"># &gt;&gt;&gt; 'A'</span></span><br><span class="line">dir()   <span class="comment"># 按模块名搜索模块定义，它返回一个字符串类型的存储列表</span></span><br><span class="line">bin(dec_num)    <span class="comment"># 10进制 转 2进制</span></span><br><span class="line">int(bin_str, <span class="number">2</span>) <span class="comment"># 2进制 转 10进制</span></span><br><span class="line">type(<span class="string">'A'</span>) <span class="comment"># get the type of 'A'</span></span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// lambda in python is kind of closures in swift</span></span><br><span class="line"><span class="keyword">var</span> my_add = &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) <span class="keyword">in</span> a + b&#125;</span><br><span class="line"><span class="keyword">var</span> my_add: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> = &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;    <span class="comment">// same as last one</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for example</span></span><br><span class="line"><span class="keyword">var</span> pairs = [(<span class="number">1</span>, <span class="string">"one"</span>), (<span class="number">2</span>, <span class="string">"two"</span>), (<span class="number">3</span>, <span class="string">"three"</span>), (<span class="number">4</span>, <span class="string">"four"</span>)]</span><br><span class="line">pairs.<span class="built_in">sort</span> &#123; $<span class="number">0.1</span> &lt; $<span class="number">1.1</span> &#125;</span><br><span class="line">[-<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">filter</span> &#123; $<span class="number">0</span> &gt; <span class="number">0</span> &#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span> &#123; $<span class="number">0</span> + <span class="number">10</span> &#125;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; $<span class="number">0</span> + $<span class="number">1</span> &#125;    <span class="comment">// $0 is init 0, $1 is the num in Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// closures with no return value</span></span><br><span class="line"><span class="keyword">let</span> voidClosure: () -&gt; () = &#123;   <span class="comment">// -&gt; () can be -&gt; Void</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"This is a void closure."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// using to access the variables and constants from within its own scope</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> incrementCounter = &#123; counter += <span class="number">1</span> &#125; <span class="comment">// equal to let incrementCounter: () -&gt; () = &#123; counter += 1 &#125;</span></span><br><span class="line"><span class="comment">// let incrementCounter = &#123; counter += 1 &#125;  can be write in a function</span></span><br><span class="line"><span class="comment">// 但是这个是通用方法，而之前的写法增加指定的变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementCounter</span><span class="params">(<span class="number">_</span> <span class="built_in">c</span>: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">c</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strToInt = [<span class="string">"1"</span>, <span class="string">"a"</span>, <span class="string">"2"</span>].<span class="built_in">map</span> &#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;    <span class="comment">// [Optional(1), nil, Optional(2)]</span></span><br><span class="line"><span class="comment">// flatMap 会把nil的值去掉，直接unwrap</span></span><br><span class="line"><span class="keyword">let</span> strToInt = [<span class="string">"1"</span>, <span class="string">"a"</span>, <span class="string">"2"</span>].flatMap &#123; <span class="type">Int</span>($<span class="number">0</span>) &#125;  <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">my_add = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">#for example</span></span><br><span class="line">pairs = [(<span class="number">1</span>, <span class="string">'one'</span>), (<span class="number">2</span>, <span class="string">'two'</span>), (<span class="number">3</span>, <span class="string">'three'</span>), (<span class="number">4</span>, <span class="string">'four'</span>)]</span><br><span class="line">pairs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">0</span>, [<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))    <span class="comment"># same as [x for x in [-3, -2, -1, 1, 2, 3] if x &gt; 0]</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x: x + <span class="number">10</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))    <span class="comment"># same as [x + 10 for x in [1, 2, 3]]</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce(<span class="keyword">lambda</span> a, b: a + b, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])   <span class="comment">#f(f(1, 2), 3)</span></span><br></pre></td></tr></table></figure><h2 id="List-Comprehensions-列表推导式"><a href="#List-Comprehensions-列表推导式" class="headerlink" title="List Comprehensions - 列表推导式"></a>List Comprehensions - 列表推导式</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> squares = (<span class="number">0</span>..&lt;<span class="number">10</span>).<span class="built_in">map</span> &#123; $<span class="number">0</span> * $<span class="number">0</span>&#125;</span><br><span class="line"><span class="comment">// swift do not need generator</span></span><br><span class="line"><span class="comment">// can not use list comprehension to create dic in swift</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换矩阵行列</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">squares = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">squares_generator = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">dic_squares = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#交换矩阵行列</span></span><br><span class="line">matrix = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]</span><br><span class="line">transposed = [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="comment"># same as using zip</span></span><br><span class="line">transposed = list(map(list, zip(*matrix)))  <span class="comment"># better usage</span></span><br></pre></td></tr></table></figure><h2 id="Structure-types-结构体"><a href="#Structure-types-结构体" class="headerlink" title="Structure (types) - 结构体"></a>Structure (types) - 结构体</h2><p>structure are value types, no inheritance.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> totalLocation = <span class="number">1</span>    <span class="comment">// type property  Location.totalLocation</span></span><br><span class="line">    <span class="keyword">let</span> x: <span class="type">Int</span>      <span class="comment">// stored properties</span></span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) &#123;  <span class="comment">// 如果把init放在 extension里，就不会影响系统自动生成的compiler’s initializer</span></span><br><span class="line">        <span class="keyword">self</span>.x = x</span><br><span class="line">        <span class="keyword">self</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(<span class="subst">\(x)</span>, <span class="subst">\(y)</span>)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// methods in structures cannot change the values of the instance without being marked as mutating</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeBossName</span><span class="params">(name: String)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.boss = name</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// type methods</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">factorial</span><span class="params">(of number: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>...number).<span class="built_in">reduce</span>(<span class="number">1</span>, *)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// extension can be used to extend a structure</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Level</span> </span>&#123;</span><br><span class="line">    <span class="comment">//code something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 没有结构体， 可以用类来实现, 但是要注意类引用， 不像swift的结构体可以直接赋值就是新拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Location</span>:</span></span><br><span class="line">    totalLocation = <span class="number">1</span>   <span class="comment"># Location.totalLocation</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>.format(self.x, self.y)</span><br></pre></td></tr></table></figure><h2 id="Classes-and-Objects-类和对象"><a href="#Classes-and-Objects-类和对象" class="headerlink" title="Classes and Objects - 类和对象"></a>Classes and Objects - 类和对象</h2><p>classes are reference types<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val1: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> val2: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(val1: <span class="type">Int</span>, val2: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val1 = val1</span><br><span class="line">        <span class="keyword">self</span>.val2 = val2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">function_1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//pass</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="type">Object1</span> === <span class="type">Object2</span> <span class="comment">// 判断两个引用地址是否相同</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalss</span>:</span>  <span class="comment"># class MyClass(BaseClassName1, BaseClassName2):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val1, val2)</span>:</span></span><br><span class="line">        self.val1 = val1    <span class="comment">#init</span></span><br><span class="line">        self.val2 = val2</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function_1</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 用于继承的函数</span></span><br><span class="line">isinstance(obj, int)</span><br><span class="line">issubclass(bool, int)</span><br></pre></td></tr></table></figure><h2 id="Protocols-协议"><a href="#Protocols-协议" class="headerlink" title="Protocols - 协议"></a>Protocols - 协议</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span>: <span class="title">InheritedProtocol1</span>, <span class="title">InheritedProtocol2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someProperty: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">aMethod</span><span class="params">(arg1: Double, arg2: String)</span></span> -&gt; <span class="type">SomeType</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeIt</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">init</span>(arg: <span class="type">Type</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//// SPECIFIC ////</span></span><br><span class="line"><span class="comment">// Advanced use of Protocols</span></span><br><span class="line"><span class="type">Hashable</span></span><br><span class="line"><span class="type">Equatable</span></span><br><span class="line"><span class="type">CountableRange</span></span><br><span class="line"><span class="type">Sequence</span></span><br><span class="line"><span class="type">Collection</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># do not have protocols</span></span><br><span class="line"><span class="comment"># but can achieve in this way</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piece</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(&lt;args&gt;)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(optional_error_message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queen</span><span class="params">(Piece)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(&lt;args&gt;)</span>:</span></span><br><span class="line">        <span class="comment"># Specific implementation for the Queen's movements</span></span><br></pre></td></tr></table></figure><h2 id="Tests-测试"><a href="#Tests-测试" class="headerlink" title="Tests - 测试"></a>Tests - 测试</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="comment"># 为模块提供一个便于测试的用户接口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="Reading-and-Writing-Files-文件读写"><a href="#Reading-and-Writing-Files-文件读写" class="headerlink" title="Reading and Writing Files - 文件读写"></a>Reading and Writing Files - 文件读写</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:    <span class="comment">#'r': 只读    'a': 追加</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># other method</span></span><br><span class="line">f.read(size)</span><br><span class="line">f.readline()</span><br><span class="line">list(f)</span><br><span class="line">f.readlines()</span><br><span class="line">f.write(<span class="string">'string'</span>)</span><br><span class="line">f.tell()</span><br><span class="line">f.seek(offset, from_what)</span><br></pre></td></tr></table></figure><h3 id="JSON-序列化与反序列化"><a href="#JSON-序列化与反序列化" class="headerlink" title="JSON 序列化与反序列化"></a>JSON 序列化与反序列化</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">my_list = [<span class="number">1</span>, <span class="string">'simple'</span>, <span class="string">'list'</span>]</span><br><span class="line">json.dumps(my_list)</span><br><span class="line">json.dump(my_list, file)  <span class="comment"># write json type list to file</span></span><br><span class="line">json.load(file)</span><br></pre></td></tr></table></figure><p><code>python</code>  </p><table><thead><tr><th>JSON类型</th><th>{}</th><th>[]</th><th>“string”</th><th>12345.56</th><th>true/false</th><th>null</th></tr></thead><tbody><tr><td>python类型</td><td>dict</td><td>list</td><td>str</td><td>int/float</td><td>True/False</td><td>None</td></tr></tbody></table><blockquote><p><a href="https://docs.python.org/3/library/json.html#module-json" target="_blank" rel="noopener">Python json</a></p></blockquote><h2 id="Modules-amp-Libraries-模块与库"><a href="#Modules-amp-Libraries-模块与库" class="headerlink" title="Modules &amp; Libraries - 模块与库"></a>Modules &amp; Libraries - 模块与库</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">'path you want to add'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()   <span class="comment"># Return the current working directory</span></span><br><span class="line">os.chdir(<span class="string">'paht'</span>)     <span class="comment"># Change current working directory</span></span><br><span class="line">os.system(<span class="string">'mkdir'</span>)  <span class="comment"># Run the command mkdir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copyfile(<span class="string">'data.db'</span>, <span class="string">'archive.db'</span>)</span><br><span class="line">shutil.move(<span class="string">'/build/executables'</span>, <span class="string">'installdir'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># TODO</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice(list)   <span class="comment">#随机选一个出来</span></span><br><span class="line">random.sample(range(<span class="number">100</span>), <span class="number">10</span>)   <span class="comment"># # sampling without replacement</span></span><br><span class="line">random.random() <span class="comment"># [0 - 1]</span></span><br><span class="line">random.randrange(<span class="number">6</span>) <span class="comment"># int [0 - 5]</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter <span class="comment"># Counter is very useful</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br></pre></td></tr></table></figure><h2 id="Errors-and-exceptions-错误与异常"><a href="#Errors-and-exceptions-错误与异常" class="headerlink" title="Errors and exceptions - 错误与异常"></a>Errors and exceptions - 错误与异常</h2><h3 id="Handling-exceptions-异常处理"><a href="#Handling-exceptions-异常处理" class="headerlink" title="Handling exceptions - 异常处理"></a>Handling exceptions - 异常处理</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (KindOfError, KindOfError2):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">raise</span>   <span class="comment"># rasing Exceptions</span></span><br><span class="line"><span class="keyword">else</span>:   <span class="comment">#当 try 语句没有抛出异常时, 执行else</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:    <span class="comment">#任何情况都执行 (一般用于释放外部资源)</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="User-defined-Exceptions-定义异常"><a href="#User-defined-Exceptions-定义异常" class="headerlink" title="User-defined Exceptions - 定义异常"></a>User-defined Exceptions - 定义异常</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.value)</span><br></pre></td></tr></table></figure><h3 id="Exception-types-异常类型"><a href="#Exception-types-异常类型" class="headerlink" title="Exception types - 异常类型"></a>Exception types - 异常类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">ZeroDivisionError   <span class="comment">#零除错误</span></span><br><span class="line">NameError   <span class="comment">#命名错误</span></span><br><span class="line">TypeError   <span class="comment">#类型错误</span></span><br><span class="line">StopIteration <span class="comment">#生成器终结时候的错误</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener">Python Built-in Exceptions</a></p></blockquote><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><code>swift</code><br>ARC<br>using Automatic reference counting, 有循环引用漏洞<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">strong  <span class="comment">// (default) as long as anyone, anywhere has a strong pointer to an instance, it will stay in the heap</span></span><br><span class="line"><span class="keyword">weak</span>    <span class="comment">// (only work for optional). if no one else is interested in this, then neither am I, set me to nil in that case. A weak pointer will Never keep an object in the heap.</span></span><br><span class="line"><span class="keyword">unowned</span> <span class="comment">// don't reference count this; crash if I'm wrong; rarely use, usually only to break memory cycles between objects</span></span><br></pre></td></tr></table></figure></p><p><code>python</code><br>python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略, 一样有循环引用的漏洞<br><code>java</code><br>garbage collection (GC)  </p><h2 id="Uncategorized-未归类"><a href="#Uncategorized-未归类" class="headerlink" title="Uncategorized - 未归类"></a>Uncategorized - 未归类</h2><p>以及其他特性汇总</p><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// How to create coutable range for FLOAT (for loop)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0.5</span>, through: <span class="number">15.25</span>, by: <span class="number">0.3</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// How to extension Int to get random int</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arc4random: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(<span class="keyword">self</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">self</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(<span class="keyword">self</span>)))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><h4 id="template-模版"><a href="#template-模版" class="headerlink" title="template 模版"></a>template 模版</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-   # usually put this in Header, 为了让中文输出没有乱码，纯英文不需要</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""    this comment save in __doc__</span></span><br><span class="line"><span class="string"> AUTHOR :</span></span><br><span class="line"><span class="string"> PURPOSE :</span></span><br><span class="line"><span class="string"> VERSION :</span></span><br><span class="line"><span class="string"> DATE :</span></span><br><span class="line"><span class="string"> INFO :</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Author Name'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前模块直接运行时，运行以下代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator 装饰器"></a>Decorator 装饰器</h4><p>在代码运行期间动态增加功能的方式，称之为“装饰器”(Decorator). 本质上，decorator就是一个返回函数的高阶函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = func(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        print(<span class="string">'[Runing time of function `&#123;func&#125;` is &#123;run_time:.6f&#125; sec.]'</span>.format(</span><br><span class="line">              func = func.__name__, run_time = end_time - start_time))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure></p><h5 id="property"><a href="#property" class="headerlink" title="@property"></a><code>@property</code></h5><p><code>@property</code> 装饰器就是负责把一个方法变成属性调用的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height)</span>:</span></span><br><span class="line">        self._width = width    <span class="comment"># get set</span></span><br><span class="line">        self._height = height    <span class="comment"># get</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._width</span><br><span class="line"></span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self._width = val</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._height</span><br></pre></td></tr></table></figure></p><h4 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h4><p>使用 <code>__slots__</code> 限制实例的属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p><code>__slots__</code> 定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p></blockquote><h3 id="Tutorial-sites-可参考教学网址"><a href="#Tutorial-sites-可参考教学网址" class="headerlink" title="Tutorial sites - 可参考教学网址"></a>Tutorial sites - 可参考教学网址</h3><ul><li><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="noopener">python3 中文</a></li><li><a href="https://docs.python.org/3.5/tutorial/index.html" target="_blank" rel="noopener">python3 官方</a></li><li><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">python3 菜鸟</a></li><li><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html" target="_blank" rel="noopener">swift 官方</a></li><li><a href="http://www.runoob.com/swift/swift-tutorial.html" target="_blank" rel="noopener">swift 菜鸟</a></li><li><a href="https://swift.org/documentation/api-design-guidelines/" target="_blank" rel="noopener">Swift-API-design-guide</a></li></ul><hr><p>Author: <code>Min Gao</code></p>]]></content>
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> syntax </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git Syntax</title>
      <link href="/post/5c6afe15/"/>
      <url>/post/5c6afe15/</url>
      <content type="html"><![CDATA[<h1 id="Git-Syntax"><a href="#Git-Syntax" class="headerlink" title="Git Syntax"></a>Git Syntax</h1><h2 id="Git-Workflow"><a href="#Git-Workflow" class="headerlink" title="Git Workflow"></a>Git Workflow</h2><p><img src="https://github.com/HeavenMin/material/blob/master/other_image/git_workflow.png?raw=true" alt="git_workflow"></p><h2 id="Git-Version-Control-Rules"><a href="#Git-Version-Control-Rules" class="headerlink" title="Git Version Control Rules"></a>Git Version Control Rules</h2><ul><li>Commit related changes</li><li><strong>Test code</strong> before you commit</li><li>Use branches</li><li>Commit often</li><li>Write <strong>good commit messages</strong></li><li>Agree on a workflow</li><li>Don’t commit <strong>half-done</strong> work</li><li>Version control is not a backup system</li></ul><h2 id="Syntax-Cheat-Sheet"><a href="#Syntax-Cheat-Sheet" class="headerlink" title="Syntax Cheat Sheet"></a>Syntax Cheat Sheet</h2><table><thead><tr><th>Original syntax</th><th>Alias</th><th>Purpose</th></tr></thead><tbody><tr><td><code>git help &lt;command&gt;</code></td><td>N/A</td><td><em>获得命令的帮助指南</em></td></tr><tr><td><strong>CREATE</strong></td><td></td><td></td></tr><tr><td><code>git init</code></td><td>N/A</td><td><em>Git仓库初始化</em></td></tr><tr><td><code>git clone &lt;address&gt;</code></td><td>N/A</td><td><em>克隆一个现存的库</em></td></tr><tr><td><strong>LOCAL CHANGES</strong></td><td></td><td></td></tr><tr><td><code>git add &lt;file&gt;</code></td><td>ga &lt;&gt;</td><td><em>添加指定文件</em></td></tr><tr><td><code>git add --all / git add .</code></td><td><strong>gaa</strong></td><td><em>添加所有修改文件</em></td></tr><tr><td><code>git commit -m &quot;info&quot;</code></td><td><strong>gcmsg “”</strong></td><td><em>提交文件到仓库</em></td></tr><tr><td><code>git commit --amend</code></td><td>N/A</td><td><em>修改上一次commit内容</em></td></tr><tr><td><code>git status</code></td><td><strong>gst</strong></td><td><em>检查仓库当前状态</em></td></tr><tr><td><code>git status -sb</code></td><td><strong>gsb</strong></td><td><em>精简检查仓库状态</em></td></tr><tr><td><code>git diff</code></td><td>gd</td><td><em>查看修改内容</em></td></tr><tr><td><code>git diff HEAD -- &lt;file&gt;</code></td><td>N/A</td><td><em>查看工作区与版本库的区别</em></td></tr><tr><td><strong>COMMIT HISTORY</strong></td><td></td><td></td></tr><tr><td><code>git log</code></td><td>glg / g lg</td><td><em>查看历史记录</em></td></tr><tr><td><code>git reflog</code></td><td>N/A</td><td><em>记录每一次命令,可以查要回到未来的版本</em></td></tr><tr><td><code>git blame &lt;file&gt;</code></td><td>N/A</td><td><em>查看指定文件的更改记录</em></td></tr><tr><td><strong>UNDO</strong></td><td></td><td></td></tr><tr><td><code>git reset --hard &lt;HEAD^&gt;</code></td><td>grhh &lt;&gt;</td><td><em>回退到指定版本(commit id)</em></td></tr><tr><td><code>git reset HEAD &lt;file&gt;</code></td><td>grh HEAD &lt;&gt;</td><td><em>将暂存区的修改撤销，放回工作区</em></td></tr><tr><td><code>git checkout -- &lt;file&gt;</code></td><td>gco – &lt;&gt;</td><td><em>撤销最近一次修改</em></td></tr><tr><td><strong>BRANCHES &amp; TAGS</strong></td><td></td><td></td></tr><tr><td><code>git checkout -b &lt;branchname&gt;</code></td><td><strong>gcb &lt;&gt;</strong></td><td><em>创建一个分支并直接切换到该分支</em></td></tr><tr><td><code>git checkout &lt;branchname&gt;</code></td><td>gco &lt;&gt;</td><td><em>切换到一个分支</em></td></tr><tr><td><code>git branch</code></td><td>gb</td><td><em>查看当前分支</em></td></tr><tr><td><code>git branch &lt;branchname&gt;</code></td><td>gb &lt;&gt;</td><td><em>创建一个分支</em></td></tr><tr><td><code>git branch -d &lt;branchname&gt;</code></td><td>gbd &lt;&gt;</td><td><em>删除一个分支</em></td></tr><tr><td><code>git branch -D &lt;branchname&gt;</code></td><td>N/A</td><td><em>强制删除一个分支</em></td></tr><tr><td><code>git merge &lt;branchname&gt;</code></td><td>gm &lt;&gt;</td><td><em>合并分支</em></td></tr><tr><td><code>git merge --no--ff -m &quot;info&quot; &lt;b&gt;</code></td><td>N/A</td><td><em>合并分支并禁用Fast forward</em></td></tr><tr><td><code>git tag &lt;v1.0&gt;</code></td><td>N/A</td><td><em>打一个新标签</em></td></tr><tr><td><code>git tag</code></td><td>N/A</td><td><em>查看素有标签</em></td></tr><tr><td><code>git tag &lt;v1.0&gt; &lt;commit id&gt;</code></td><td>N/A</td><td><em>给指定历史提交的commit打标签</em></td></tr><tr><td><code>git tag -a &lt;v&gt; -m &quot;info&quot; &lt;cid&gt;</code></td><td>N/A</td><td><em>打标签的同时增加说明文字</em></td></tr><tr><td><code>git show &lt;tagname&gt;</code></td><td>N/A</td><td><em>查看标签信息</em></td></tr><tr><td><code>git tag -d &lt;v1.0&gt;</code></td><td>N/A</td><td><em>删除指定本地标签</em></td></tr><tr><td><strong>STASH</strong></td><td></td><td></td></tr><tr><td><code>git stash</code></td><td>N/A</td><td><em>将工作区内容储藏起来</em></td></tr><tr><td><code>git stash save &quot;info&quot;</code></td><td>gsta “”</td><td><em>将工作区内容储藏起来,并加注释</em></td></tr><tr><td><code>git stash list</code></td><td>gstl</td><td><em>查看stash列表</em></td></tr><tr><td><code>git stash pop</code></td><td>gstp</td><td><em>恢复最顶层暂存区并删除</em></td></tr><tr><td><code>git stash apply &lt;stash@{0}&gt;</code></td><td>gstaa &lt;&gt;</td><td><em>恢复指定暂存区</em></td></tr><tr><td><code>git stash drop &lt;stash@{0}&gt;</code></td><td>gstd &lt;&gt;</td><td><em>删除指定暂存区</em></td></tr><tr><td><strong>UPDATE &amp; PUBLISH</strong></td><td></td><td></td></tr><tr><td><code>git remote -v</code></td><td>grv</td><td><em>查看远程库信息</em></td></tr><tr><td><code>git push &lt;orgin master&gt;</code></td><td>gp &lt;&gt;</td><td><em>推送到远程服务器</em></td></tr><tr><td><code>git push orgin master</code></td><td>gpom</td><td><em>推送到远程master分支</em></td></tr><tr><td><code>git pull</code></td><td>gl</td><td><em>抓取最新更新</em></td></tr><tr><td><code>gcb &lt;branch&gt; origin/&lt;branch&gt;</code></td><td>N/A</td><td><em>在本地创建与远程分支对应的分支</em></td></tr><tr><td><code>gb --set-upstream-to &lt;&gt; origin/&lt;&gt;</code></td><td>ggsup</td><td><em>建立本地分支与远程分支的链接关系</em></td></tr><tr><td><code>git branch -dr origin/&lt;branch&gt;</code></td><td>N/A</td><td><em>删除远程指定分支</em></td></tr><tr><td><code>git push origin :refs/tags/v1.0</code></td><td>N/A</td><td><em>删除远程指定标签</em></td></tr><tr><td><code>git push origin &lt;tagname&gt;</code></td><td>N/A</td><td><em>推送指定本地标签到远程</em></td></tr><tr><td><code>git push origin --tags</code></td><td>N/A</td><td><em>推送全部本地标签到远程</em></td></tr><tr><td><code>git check-ignore -v &lt;file&gt;</code></td><td>N/A</td><td><em>检查忽略规则</em></td></tr></tbody></table><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>将需要忽略的文件添加进 <code>.gitignore</code></p><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><p>一般生成在 <code>~/.ssh</code> 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f youtkeyname.key          //-f 指定生成的密钥文件名字</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  //-C 提供一个注释</span><br></pre></td></tr></table></figure></p><h2 id="创建新仓库-amp-关联本地仓库"><a href="#创建新仓库-amp-关联本地仓库" class="headerlink" title="创建新仓库 &amp; 关联本地仓库"></a>创建新仓库 &amp; 关联本地仓库</h2><ul><li>先在GitHub上创建新respository后直接克隆到本地 (推荐方法)  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Username/projectname.git</span><br></pre></td></tr></table></figure><ul><li>与本地创建的本地仓库关联  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Username/projectname.git</span><br><span class="line">git push -u origin master  //第一次push未关联时候使用-u</span><br></pre></td></tr></table></figure><h2 id="云主机SSH快捷设置"><a href="#云主机SSH快捷设置" class="headerlink" title="云主机SSH快捷设置"></a>云主机SSH快捷设置</h2><p>在 <code>~/.ssh/config</code> 中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host hostName</span><br><span class="line">    User user_name</span><br><span class="line">    HostName xxx.xxx.xxx.xxx    // IP address</span><br><span class="line">    IdentityFile ~/.ssh/your_private_key    // private key position, if needed</span><br></pre></td></tr></table></figure></p><p>在 <code>~/.ssh/known_hosts</code>里存的信任ssh服务器列表</p><hr><p>Author: <code>Min Gao</code></p>]]></content>
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Algorithm and Data Structure Summary</title>
      <link href="/post/1398f2ea/"/>
      <url>/post/1398f2ea/</url>
      <content type="html"><![CDATA[<p>算法与数据结构汇总</p><h2 id="Big-O-Concept"><a href="#Big-O-Concept" class="headerlink" title="Big-O Concept"></a>Big-O Concept</h2><p>{O 上界} {Ω Omega 下界} {Θ Theta 上下界}<br><img src="https://raw.githubusercontent.com/HeavenMin/material/master/algorithm/big_O%20complexity.png" alt="big_o_complexity"></p><h2 id="Sorting-Algorithm-Complexity"><a href="#Sorting-Algorithm-Complexity" class="headerlink" title="Sorting Algorithm Complexity"></a>Sorting Algorithm Complexity</h2><p><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sort_algorithm_complexity.png?raw=true" alt="sort_algorithm_complexity"><br><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sorting_algo_gif.gif?raw=true" alt="sorting_algo_gif"> (credit to: <a href="https://www.toptal.com/developers/sorting-algorithms/" target="_blank" rel="noopener">https://www.toptal.com/developers/sorting-algorithms/</a>)</p><h2 id="Data-Structure-数据结构"><a href="#Data-Structure-数据结构" class="headerlink" title="Data Structure 数据结构"></a>Data Structure 数据结构</h2><h3 id="array-数组"><a href="#array-数组" class="headerlink" title="array 数组"></a>array 数组</h3><ul><li>特性<ul><li>ordered</li><li>random-access (constant O(1) time access)</li><li>get_length - O(1)</li><li>append_last - O(1)</li></ul></li></ul><h3 id="dictionary-字典"><a href="#dictionary-字典" class="headerlink" title="dictionary 字典"></a>dictionary 字典</h3><p><code>key-value</code> <code>hashable</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">scores = &#123;<span class="string">"Eric"</span>: <span class="number">90</span>, <span class="string">"Mark"</span>: <span class="number">80</span>, <span class="string">"Wayne"</span>: <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> scores: [<span class="type">String</span>: <span class="type">Int</span>] = [<span class="string">"Eric"</span>: <span class="number">90</span>, <span class="string">"Mark"</span>: <span class="number">80</span>, <span class="string">"Wayne"</span>: <span class="number">60</span>]</span><br></pre></td></tr></table></figure><h3 id="linked-list-链表"><a href="#linked-list-链表" class="headerlink" title="linked list 链表"></a>linked list 链表</h3><blockquote><p>benefit: can add and remove items from the beginning of the list in constant time.</p></blockquote><p><code>singly linked list 单向链表</code>, <code>doubly linked list 双向链表</code></p><ul><li><strong>runer technique</strong>: iterate through the linked list with two pointers simultaneously (fast and slow)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment"># singly linked list 单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, next=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="comment"># doubly linked list 双向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, next=None, prev=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line">        self.prev = prev</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// singly linked list 单向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedListNode</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">SinglyLinkedListNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Value</span>, next: <span class="type">SinglyLinkedListNode</span>?=<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.next = next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// doubly linked list 双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedListNode</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">DoublyLinkedListNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> prev: <span class="type">DoublyLinkedListNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Value</span>, next: <span class="type">DoublyLinkedListNode</span>?=<span class="literal">nil</span>, prev: <span class="type">DoublyLinkedListNode</span>?=<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.next =next</span><br><span class="line">        <span class="keyword">self</span>.prev = prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h3><blockquote><p>unordered collecition of unique values</p></blockquote><ul><li>dic 字典</li><li>hashtable</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">my_set = set([<span class="number">1</span>,<span class="number">2</span>])    <span class="comment"># + - &amp; | ^</span></span><br><span class="line">empty_set = set()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_set: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> my_set2 = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br></pre></td></tr></table></figure><h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><p><code>stack</code> <code>queue</code> <code>priority queue</code> <code>heap</code></p><h4 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack 栈"></a>stack 栈</h4><blockquote><p><code>{LIFO}</code> {push, pop, top, isEmpty}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">stack = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">stack.append(<span class="number">4</span>)</span><br><span class="line">num = stack.pop()   <span class="comment"># &gt;&gt;&gt; 4</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> stack: [<span class="type">E</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">        stack.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.popLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h4><blockquote><p><code>{FIFO}</code> {enqueue, dequeue, front, rear, isEmpty}</p></blockquote><ul><li>can be created in four ways:<ul><li>array - {dequeue in this struct takes O(n)}</li><li>doubly linked list - {elements aren’t in contiguous blocks of memory. will increase access time}</li><li>ring buffer - {fixed size}</li><li>two stacks - {best}</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="comment"># double ended queue</span></span><br><span class="line"><span class="comment"># deque 在首尾两端快速插入和删除而设计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue  = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">queue.append(<span class="number">4</span>)</span><br><span class="line">queue.popleft()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueStack</span>&lt;<span class="title">T</span>&gt;: <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> leftStack: [<span class="type">T</span>] = []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> rightStack: [<span class="type">T</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> leftStack.isEmpty &amp;&amp; rightStack.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> peek: <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> !leftStack.isEmpty ? leftStack.last : rightStack.first</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">enqueue</span><span class="params">(<span class="number">_</span> element: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        rightStack.append(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">dequeue</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> leftStack.isEmpty &#123;</span><br><span class="line">            leftStack = rightStack.reversed()</span><br><span class="line">            rightStack.removeAll()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftStack.popLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority queue 优先队列"></a>priority queue 优先队列</h5><!-- TODO  --><h5 id="heap-堆"><a href="#heap-堆" class="headerlink" title="heap 堆"></a>heap 堆</h5><blockquote><p>can also be developed in tree structure<br>[<!-- TODO  -->]</p></blockquote><h3 id="graph-图"><a href="#graph-图" class="headerlink" title="graph 图"></a>graph 图</h3><blockquote><p>{G = &lt;V-vertex, E-edge&gt;} {directed, undirected ,weighted, unweighted}</p></blockquote><ul><li>complete graph 完全图</li><li>dense graph 稠密图</li><li>spares graph 稀疏图</li><li>{表示方法: adjacency matrix邻接矩阵 - 适合稠密图 &amp; adjacency lists邻接链表 - 适合稀疏图}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjacencyList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a_list = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span><span class="params">(self, from_vertex, to_vertex)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> from_vertex <span class="keyword">in</span> self.a_list.keys():</span><br><span class="line">            self.a_list[from_vertex].append(to_vertex)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.a_list[from_vertex] = [to_vertex]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_a_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> from_v <span class="keyword">in</span> self.a_list:</span><br><span class="line">            print(<span class="string">'&#123;vertex&#125; -&gt;'</span>.format(vertex = from_v), <span class="string">' -&gt; '</span>.join(</span><br><span class="line">                  [str(to_v) <span class="keyword">for</span> to_v <span class="keyword">in</span> self.a_list[from_v]]))</span><br></pre></td></tr></table></figure><h3 id="tree-树"><a href="#tree-树" class="headerlink" title="tree 树"></a>tree 树</h3><blockquote><p>{|E| = |V| - 1}</p></blockquote><ul><li>tree</li><li>binary tree</li><li>binary search tree (BST) 二叉查找树 {math.floor(logn) &lt;= h &lt;= n-1}</li><li>balanced search tree 平衡查找树<ul><li>self-balancing 自平衡查找树<ul><li>AVL tree<ul><li>每个节点的左右子树高度差不超过1</li></ul></li><li>red-black tree 红黑树<ul><li>能容忍同一节点的一棵子树的高度是另一棵子树的两倍</li></ul></li><li>splay tree 分裂树</li></ul></li><li>允许单个节点中包含不只一个元素<ul><li>2-3 tree</li><li>2-3-4 tree</li><li>B tree</li></ul></li></ul></li><li>complete binary tree 完全二叉树</li><li>heap (binary heaps) {complete binary tree}<ul><li>可以用完全二叉树实现, 树的每一层都是满的，除了最后一层最右边元素可能缺位</li><li>父母优势, 每一个节点的键都要大于等于它子女的键  </li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     10</span><br><span class="line">   /    \      if using array:</span><br><span class="line">  8      7          parents  leaves</span><br><span class="line"> / \    / \     0   1  2  3| 4  5  6</span><br><span class="line">5   2  6       [ , 10, 8, 7, 5, 2, 6]</span><br></pre></td></tr></table></figure><ul><li>Trie tree (prefix trees) 单词查找树<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    root</span><br><span class="line">   /    \</span><br><span class="line">  T      C</span><br><span class="line"> / \    / \</span><br><span class="line">R.  O. A.  O.</span><br></pre></td></tr></table></figure></li></ul><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.children = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(child)</span>:</span></span><br><span class="line">        children.append(child)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> children: [<span class="type">TreeNode</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> child: TreeNode)</span></span> &#123;</span><br><span class="line">        children.append(child)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="binary-tree-二叉树"><a href="#binary-tree-二叉树" class="headerlink" title="binary tree 二叉树"></a>binary tree 二叉树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// draw the tree</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> diagram(<span class="keyword">for</span>: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">diagram</span><span class="params">(<span class="keyword">for</span> node: BinaryTreeNode?,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> top: String = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> root: String = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> bottom: String = <span class="string">""</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root + <span class="string">"nil\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root + <span class="string">"<span class="subst">\(node.val)</span>\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diagram(<span class="keyword">for</span>: node.<span class="keyword">right</span>, top + <span class="string">" "</span>, top + <span class="string">"┌──"</span>, top + <span class="string">"│ "</span>)</span><br><span class="line">            + root + <span class="string">"<span class="subst">\(node.val)</span>\n"</span></span><br><span class="line">            + diagram(<span class="keyword">for</span>: node.<span class="keyword">left</span>, bottom + <span class="string">"│ "</span>, bottom + <span class="string">"└──"</span>, bottom + <span class="string">" "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: This BinaryTreeNode discription algorithm from <a href="https://www.objc.io/books/optimizing-collections/" target="_blank" rel="noopener">Optimizing Collections</a></p><ul><li>tree traversal<ul><li>preorder (左中右)</li><li>inorder （中左右)</li><li>postorder (左右中)  </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        print(tree.val)</span><br><span class="line">        preorder(tree.left)</span><br><span class="line">        preorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        inorder(tree.left)</span><br><span class="line">        print(tree.val)</span><br><span class="line">        inorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        postorder(tree.left)</span><br><span class="line">        postorder(tree.right)</span><br><span class="line">        print(tree.val)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        visit(val)</span><br><span class="line">        <span class="keyword">left</span>?.preOrder(visit: visit)</span><br><span class="line">        <span class="keyword">right</span>?.preOrder(visit: visit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">left</span>?.inOrder(visit: visit)</span><br><span class="line">        visit(val)</span><br><span class="line">        <span class="keyword">right</span>?.inOrder(visit: visit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">postOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">left</span>?.postOrder(visit: visit)</span><br><span class="line">        <span class="keyword">right</span>?.postOrder(visit: visit)</span><br><span class="line">        visit(val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="binary-search-tree-BST-二叉查找树"><a href="#binary-search-tree-BST-二叉查找树" class="headerlink" title="binary search tree (BST) 二叉查找树"></a>binary search tree (BST) 二叉查找树</h4><blockquote><p>math.floor(logn) &lt;= h &lt;= n-1<br>fast lookup, addition, and removal operations: O(logn)</p></blockquote><ul><li>value of left child less than its parent</li><li>value of right child greater than or equal to its parent</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, visit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.left:</span><br><span class="line">            self.left.inorder(visit)</span><br><span class="line">        visit(self.val)</span><br><span class="line">        <span class="keyword">if</span> self.right:</span><br><span class="line">            self.right.inorder(visit)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        min = self</span><br><span class="line">        <span class="keyword">while</span> min.left:</span><br><span class="line">            min = min.left</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">diagram</span><span class="params">(node, top=<span class="string">""</span>, root=<span class="string">""</span>, bottom=<span class="string">""</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> root + <span class="string">"None\n"</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">return</span> (diagram(node.right, top + <span class="string">' '</span>, top + <span class="string">'┌──'</span>, top + <span class="string">'│ '</span>)</span><br><span class="line">                   + root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">                   + diagram(node.left, bottom + <span class="string">'│ '</span>, bottom + <span class="string">'└──'</span>, bottom + <span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">return</span> diagram(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__insert(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> BinaryTreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__insert(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__insert(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contain</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        current = self.root</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="keyword">if</span> current.val == val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> val &lt; current.val:</span><br><span class="line">                current = current.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.right</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__remove(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> val == node.val:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                <span class="keyword">return</span> node.right</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                <span class="keyword">return</span> node.left</span><br><span class="line">            node.val = node.right.get_min().val</span><br><span class="line">            node.right = self.__remove(node.right, node.val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__remove(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__remove(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, root, visit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.inorder(root.left, visit)</span><br><span class="line">            visit(root.val)</span><br><span class="line">            self.inorder(root.right, visit)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.root)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the min node of the BTS</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span>: <span class="type">BinaryTreeNode</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">left</span>?.<span class="built_in">min</span> ?? <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// same as extension in binary tree</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">Element</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> root: <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt;?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> val: Element)</span></span> &#123;</span><br><span class="line">        root = insert(from: root, val: val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(from node: BinaryTreeNode&lt;Element&gt;?, val: Element)</span></span> -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">BinaryTreeNode</span>(value: val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val &#123;</span><br><span class="line">            node.<span class="keyword">left</span> = insert(from: node.<span class="keyword">left</span>, val: val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="keyword">right</span> = insert(from: node.<span class="keyword">right</span>, val: val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> value: Element)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> current = root</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> node = current &#123;</span><br><span class="line">            <span class="keyword">if</span> node.val == value &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> value &lt; node.val &#123;</span><br><span class="line">                current = node.<span class="keyword">left</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = node.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> value: Element)</span></span> &#123;</span><br><span class="line">        root = remove(node: root, value: value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(node: BinaryTreeNode&lt;Element&gt;?, value: Element)</span></span> -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> value == node.val &#123;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> node.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> node.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            node.val = node.<span class="keyword">right</span>!.<span class="built_in">min</span>.val</span><br><span class="line">            node.<span class="keyword">right</span> = remove(node: node.<span class="keyword">right</span>, value: node.val)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value &lt; node.val &#123;</span><br><span class="line">            node.<span class="keyword">left</span> = remove(node: node.<span class="keyword">left</span>, value: value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="keyword">right</span> = remove(node: node.<span class="keyword">right</span>, value: value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinarySearchTree</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root?.description ?? <span class="string">"empty tree"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AVL-Tree"><a href="#AVL-Tree" class="headerlink" title="AVL Tree"></a>AVL Tree</h4><blockquote><p>self-balancing binary search tree</p></blockquote><ul><li>Rotations<ul><li>left</li><li>right-left</li><li>right</li><li>left-right</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">__author__ = <span class="string">'Min'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        min = self</span><br><span class="line">        <span class="keyword">while</span> min.left:</span><br><span class="line">            min = min.left</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_balanceFactor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_left_height() - self.get_right_height()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_left_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.left.height <span class="keyword">if</span> self.left <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_right_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.right.height <span class="keyword">if</span> self.right <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">diagram</span><span class="params">(node, top=<span class="string">""</span>, root=<span class="string">""</span>, bottom=<span class="string">""</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> root + <span class="string">"None\n"</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">return</span> (diagram(node.right, top + <span class="string">' '</span>, top + <span class="string">'┌──'</span>, top + <span class="string">'│ '</span>)</span><br><span class="line">                   + root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">                   + diagram(node.left, bottom + <span class="string">'│ '</span>, bottom + <span class="string">'└──'</span>, bottom + <span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">return</span> diagram(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__insert(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> AVLTreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__insert(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__insert(node.right, val)</span><br><span class="line">        balanced_node = self.balanced(node)</span><br><span class="line">        balanced_node.height = max(balanced_node.get_left_height(),</span><br><span class="line">                                   balanced_node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> balanced_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        pivot = node.right</span><br><span class="line">        node.right = pivot.left</span><br><span class="line">        pivot.left = node</span><br><span class="line">        node.height = max(node.get_left_height(), node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        pivot.height = max(pivot.get_left_height(), pivot.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        pivot = node.left</span><br><span class="line">        node.left = pivot.right</span><br><span class="line">        pivot.right = node</span><br><span class="line">        node.height = max(node.get_left_height(), node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        pivot.height = max(pivot.get_left_height(), pivot.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_left_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.right:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        node.right = self.right_rotate(node.right)</span><br><span class="line">        <span class="keyword">return</span> self.left_rotate(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_right_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        node.left = self.left_rotate(node.left)</span><br><span class="line">        <span class="keyword">return</span> self.right_rotate(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balanced</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.get_balanceFactor() == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.get_balanceFactor() == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> self.left_right_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.right_rotate(node)</span><br><span class="line">        <span class="keyword">if</span> node.get_balanceFactor() == <span class="number">-2</span>:</span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.get_balanceFactor() == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> self.right_left_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.left_rotate(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contain</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        current = self.root</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="keyword">if</span> current.val == val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> val &lt; current.val:</span><br><span class="line">                current = current.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.right</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__remove(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> val == node.val:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                <span class="keyword">return</span> node.right</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                <span class="keyword">return</span> node.left</span><br><span class="line">            node.val = node.right.get_min().val</span><br><span class="line">            node.right = self.__remove(node.right, node.val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__remove(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__remove(node.right, val)</span><br><span class="line">        balanced_node = self.balanced(node)</span><br><span class="line">        balanced_node.height = max(balanced_node.get_left_height(),</span><br><span class="line">                                   balanced_node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> balanced_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.root)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">leftRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = node.<span class="keyword">right</span>!</span><br><span class="line">        node.<span class="keyword">right</span> = pivot.<span class="keyword">left</span></span><br><span class="line">        pivot.<span class="keyword">left</span> = node</span><br><span class="line">        node.height = <span class="built_in">max</span>(node.leftHeight, node.rightHeight) + <span class="number">1</span></span><br><span class="line">        pivot.height = <span class="built_in">max</span>(pivot.leftHeight, pivot.rightHeight) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rightRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = node.<span class="keyword">left</span>!</span><br><span class="line">    node.<span class="keyword">left</span> = pivot.<span class="keyword">right</span></span><br><span class="line">    pivot.<span class="keyword">right</span> = node</span><br><span class="line">    node.height = <span class="built_in">max</span>(node.leftHeight, node.rightHeight) + <span class="number">1</span></span><br><span class="line">    pivot.height = <span class="built_in">max</span>(pivot.leftHeight, pivot.rightHeight) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pivot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rightLeftRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    node.<span class="keyword">right</span> = rightRotate(<span class="keyword">right</span>)</span><br><span class="line">    <span class="keyword">return</span> leftRotate(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">leftRightRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    node.<span class="keyword">left</span> = leftRotate(<span class="keyword">left</span>)</span><br><span class="line">    <span class="keyword">return</span> rightRotate(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">balanced</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> node.balanceFactor &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span>, <span class="keyword">left</span>.balanceFactor == -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRightRotate(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span>, <span class="keyword">right</span>.balanceFactor == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rightLeftRotate(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRotate(node)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-蛮力法"><a href="#Brute-Force-蛮力法" class="headerlink" title="Brute Force 蛮力法"></a>Brute Force 蛮力法</h2><h3 id="selection-sort-选择排序"><a href="#selection-sort-选择排序" class="headerlink" title="selection sort 选择排序"></a>selection sort 选择排序</h3><p>{<strong>无论什么情况排序速度一样快</strong>}</p><ul><li>从第一个元素开始从它之后找最小的元素与之交换.</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n^2)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list) - <span class="number">1</span>):</span><br><span class="line">        min_num = list[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(list)):</span><br><span class="line">            min_num = min(min_num, list[j])</span><br><span class="line">        list[list[i:].index(min_num) + i], list[i] = list[i], min_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="bubble-sort-冒泡排序"><a href="#bubble-sort-冒泡排序" class="headerlink" title="bubble sort 冒泡排序"></a>bubble sort 冒泡排序</h3><p>{<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>比较相邻元素并将最大的元素向后沉直到最后，重复这个步骤</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort_upgrade</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        already_sorted = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">                already_sorted = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> already_sorted:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="sequential-search-顺序查找-线性算法"><a href="#sequential-search-顺序查找-线性算法" class="headerlink" title="sequential search 顺序查找 线性算法"></a>sequential search 顺序查找 线性算法</h3><ul><li>Time complexity: {Average: Θ(n), Worse: O(n), Best: Ω(1)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search</span><span class="params">(list, k)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, ele <span class="keyword">in</span> enumerate(list):</span><br><span class="line">        <span class="keyword">if</span> ele == k:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="dfs-深度优先查找"><a href="#dfs-深度优先查找" class="headerlink" title="dfs 深度优先查找"></a>dfs 深度优先查找</h3><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, stack, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        vertex = stack.pop()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + stack:</span><br><span class="line">                stack.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure><h3 id="bfs-广度优先查找"><a href="#bfs-广度优先查找" class="headerlink" title="bfs 广度优先查找"></a>bfs 广度优先查找</h3><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|) = O(b^{d})  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, queue, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + queue:</span><br><span class="line">                queue.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure><h2 id="Decrease-And-Conquer-减治法"><a href="#Decrease-And-Conquer-减治法" class="headerlink" title="Decrease-And-Conquer 减治法"></a>Decrease-And-Conquer 减治法</h2><h3 id="insertion-sort-插入排序"><a href="#insertion-sort-插入排序" class="headerlink" title="insertion sort 插入排序"></a>insertion sort 插入排序</h3><p>{<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>从第二个元素开始向前找到正确的位置插入</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insetion_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        insert_num = list[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> list[j] &gt; insert_num:</span><br><span class="line">            list[j + <span class="number">1</span>] = list[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        list[j+ <span class="number">1</span>] = insert_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="shell-sort-希尔排序"><a href="#shell-sort-希尔排序" class="headerlink" title="shell sort 希尔排序"></a>shell sort 希尔排序</h3><ul><li>通过一个gap来左插入排序(常用方法是从len/2gap开始每次缩小2倍)</li><li>Time complexity: {Average: Θ(n(logn)^2), Worse: O(n(logn)^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    gap = len(list) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(list)):</span><br><span class="line">            temp = list[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> list[j - gap] &gt; temp:</span><br><span class="line">                list[j], list[j - gap] = list[j - gap], temp</span><br><span class="line">                j -= gap</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="generating-permutations"><a href="#generating-permutations" class="headerlink" title="generating permutations"></a>generating permutations</h3><ul><li>JohnsonTrotter<ul><li>Time complexity: O(n!)<!-- TODO --></li></ul></li></ul><h3 id="binary-search-折半查找"><a href="#binary-search-折半查找" class="headerlink" title="binary search 折半查找"></a>binary search 折半查找</h3><ul><li>Time complexity: {Average: Θ(logn), Worse: O(logn), Best: Ω(1)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(sorted_list, target)</span>:</span></span><br><span class="line">    low, high = <span class="number">0</span>, len(sorted_list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> sorted_list[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> sorted_list[mid] &gt; target:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="quick-select-快速选择"><a href="#quick-select-快速选择" class="headerlink" title="quick select 快速选择"></a>quick select 快速选择</h3><ul><li>寻找第k个最小元素,通过划分来实现</li><li>Time complexity: {Average: Θ(n), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: O(1)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_select_m</span><span class="params">(list, start, end, k_th_min)</span>:</span></span><br><span class="line">    s = partition(list, start, end)</span><br><span class="line">    <span class="keyword">if</span> s == k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list[s]</span><br><span class="line">    <span class="keyword">elif</span> s &gt; k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, start, s - <span class="number">1</span>, k_th_min)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, s + <span class="number">1</span>, end, k_th_min)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h2 id="Divide-And-Conquer-分治法"><a href="#Divide-And-Conquer-分治法" class="headerlink" title="Divide-And-Conquer 分治法"></a>Divide-And-Conquer 分治法</h2><p>分解问题，求解子问题，合并自问题的解<br>T(n) = aT(n/b) + f(n) {a个需要求解的问题，问题被分成b个，f(n)的分解合并时间消耗}<br>T(n) = <code>O(n^d) if a &lt; b^d</code> or <code>O(n^dlogn) if a = b^d</code> or <code>O(n^log_b(a)) if a &gt; b^d</code></p><h3 id="merge-sort-归并排序"><a href="#merge-sort-归并排序" class="headerlink" title="merge sort 归并排序"></a>merge sort 归并排序</h3><p>{<strong>除了heapsort以外唯一BestAveWorst全是O(nlogn)排序算法</strong>}</p><ul><li>两种实现方法(自顶向下-递归， 自底向上-循环)</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(n)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(list) &gt; <span class="number">1</span>:</span><br><span class="line">        list_b = list[:len(list) // <span class="number">2</span>]</span><br><span class="line">        list_c = list[len(list) // <span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">return</span> merge(merge_sort(list_b), merge_sort(list_c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list_b, list_c)</span>:</span></span><br><span class="line">    list_a = list_b + list_c    <span class="comment">#init list_a</span></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(list_b) <span class="keyword">and</span> j &lt; len(list_c):</span><br><span class="line">        <span class="keyword">if</span> list_b[i] &lt;= list_c[j]:</span><br><span class="line">            list_a[k] = list_b[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_a[k] = list_c[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == len(list_b):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(j, len(list_c)):</span><br><span class="line">            list_a[k] = list_c[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j == len(list_c):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(i, len(list_b)):</span><br><span class="line">            list_a[k] = list_b[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> list_a</span><br></pre></td></tr></table></figure><h3 id="quick-sort-快速排序"><a href="#quick-sort-快速排序" class="headerlink" title="quick sort 快速排序"></a>quick sort 快速排序</h3><p>{<strong>pivot的选择对于算法效率至关重要</strong>}</p><ul><li>不断选择pivot来将元素划分到它的左右来实现</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(n^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(nlogn)}</li><li>pivot每次选第一个在已经排好序的数组上时间效率是O(n^2)<ul><li>优化方法<ul><li>使用随机pivot, 平均划分pivot, 快排好后使用插入排序  </li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_m</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        pivot = partition(list, start, end)</span><br><span class="line">        quick_sort_m(list, start, pivot - <span class="number">1</span>)</span><br><span class="line">        quick_sort_m(list, pivot + <span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h2 id="Transform-And-Conquer-变治法"><a href="#Transform-And-Conquer-变治法" class="headerlink" title="Transform-And-Conquer 变治法"></a>Transform-And-Conquer 变治法</h2><ul><li>预排序解决问题<ul><li>检查数组中元素的唯一性</li><li>算法数组的模式 （一个数组中最多的元素)</li></ul></li></ul><h3 id="heap-sort-堆排序"><a href="#heap-sort-堆排序" class="headerlink" title="heap sort 堆排序"></a>heap sort 堆排序</h3><ul><li>先构建一个堆, 不断的删除最大键，</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    heapq.heapify(list)</span><br><span class="line">    <span class="keyword">return</span> [heapq.heappop(list) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list))]</span><br></pre></td></tr></table></figure><h3 id="problem-reduction-问题简化"><a href="#problem-reduction-问题简化" class="headerlink" title="problem reduction 问题简化"></a>problem reduction 问题简化</h3><p>{已有一种方法求其他问题}</p><ul><li>lcm(m, n) <em> gcd(m, n) = m </em> n {lcm: 最小公倍数, gcd: 最大公约数}</li><li>求一个函数的最小值， 可以求一个函数负函数的最大值的负数</li></ul><h3 id="hash-table-散列表"><a href="#hash-table-散列表" class="headerlink" title="hash table 散列表"></a>hash table 散列表</h3><ul><li>需要把键在hash table 中尽可能均匀分布</li><li>平均插入，删除， 查找效率都是 O(1), 当最坏情况全部冲突到一个位置时候，退化到 O(n)</li><li>open hasing, also: separate chaining 分离链 开hash</li><li>closed hashing 闭hash</li><li>double hashing</li><li>rehasing</li></ul><h3 id="B-tree-B树"><a href="#B-tree-B树" class="headerlink" title="B-tree B树"></a>B-tree B树</h3><!-- TODO --><h2 id="Dynamic-Programming-DP-动态规划"><a href="#Dynamic-Programming-DP-动态规划" class="headerlink" title="Dynamic Programming (DP) 动态规划"></a>Dynamic Programming (DP) 动态规划</h2><ul><li>与其对交叠的子问题一次又一次地求解，还不如对每个较小的子问题只求解一次并把结果记录在表中。 (对具有交叠子问题的问题进行求解的技术)<ul><li>类似斐波那契数</li></ul></li></ul><h3 id="coins-row-problem-求互不相临的最大金币总金额"><a href="#coins-row-problem-求互不相临的最大金币总金额" class="headerlink" title="coins_row problem (求互不相临的最大金币总金额)"></a>coins_row problem (求互不相临的最大金币总金额)</h3><ul><li>Time complexity: O(n), Space complexity: O(n)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin_row</span><span class="params">(coins)</span>:</span></span><br><span class="line">    coin1, coin2 = coins[<span class="number">0</span>], coins[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i, coin <span class="keyword">in</span> enumerate(coins[<span class="number">2</span>:]):</span><br><span class="line">        coin1, coin2 = coin2, max(coin1 + coin, coin2)</span><br><span class="line">    <span class="keyword">return</span> coin2</span><br></pre></td></tr></table></figure><h3 id="change-making-problem"><a href="#change-making-problem" class="headerlink" title="change_making problem"></a>change_making problem</h3><ul><li>Time complexity: O(mn), Space complexity: O(n)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_making</span><span class="params">(coins, change)</span>:</span></span><br><span class="line">    count = [<span class="number">0</span>] * change</span><br><span class="line">    count[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, change):</span><br><span class="line">        tmp = float(<span class="string">'inf'</span>)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= len(coins) <span class="keyword">and</span> j &lt; len(coins) <span class="keyword">and</span> i &gt;= coins[j]:</span><br><span class="line">            tmp = min(count[i - coins[j]], tmp)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        count[i] = tmp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="knapsack-problem-背包问题"><a href="#knapsack-problem-背包问题" class="headerlink" title="knapsack problem 背包问题"></a>knapsack problem 背包问题</h3><ul><li>Time complexity: O(nW), Space complexity: O(nW)</li><li>#TODO</li></ul><h3 id="memory-function-记忆功能"><a href="#memory-function-记忆功能" class="headerlink" title="memory function 记忆功能"></a>memory function 记忆功能</h3><p>TODO</p><h2 id="Greedy-Technique-贪婪技术"><a href="#Greedy-Technique-贪婪技术" class="headerlink" title="Greedy Technique 贪婪技术"></a>Greedy Technique 贪婪技术</h2><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><ul><li>构造最小生成树算法</li><li>先随机选一个点，每次扩展新的点使得这个新的点到已有点的距离最短，直到添加完所有顶点  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><ul><li>构造最小生成树算法</li><li>先按照权重将边进行排序，然后不断把边加入子图，如果加入此边会产生回路，则天国，直到完成  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><ul><li>单起点最短路径问题  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h2 id="Bit-Operation"><a href="#Bit-Operation" class="headerlink" title="Bit Operation"></a>Bit Operation</h2><ul><li>get bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_git_i_1</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num &amp; (<span class="number">1</span> &lt;&lt; i) != <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>set bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_bit</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num | (<span class="number">1</span> &lt;&lt; i)</span><br></pre></td></tr></table></figure><ul><li>clear bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_bit</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    mask = ~(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> num &amp; mask</span><br></pre></td></tr></table></figure><ul><li>update bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bit</span><span class="params">(num, i, v)</span>:</span></span><br><span class="line">    mask = ~(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> (num &amp; mask) | (v &lt;&lt; i)</span><br></pre></td></tr></table></figure><h2 id="How-To-Optimaize-the-Algorithm"><a href="#How-To-Optimaize-the-Algorithm" class="headerlink" title="How To Optimaize the Algorithm"></a>How To Optimaize the Algorithm</h2><ul><li><p>Optimaize &amp; Solve Technique</p><ul><li>Look for <strong>BUD</strong><ul><li>Bottlenecks</li><li>Unnecessary work</li><li>Duplicated work</li></ul></li><li>DIY (Do It Yourself)</li><li>Simplify and Generalize</li><li><p>Base Case and Build (always use for recursion)</p><ul><li>like for generate permutations<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 Case &quot;a&quot; --&gt; &#123;&quot;a&quot;&#125;</span><br><span class="line">2 Case &quot;ab&quot; --&gt; &#123;&quot;ab&quot;, &quot;ba&quot;&#125;</span><br><span class="line">3 Case &quot;abc&quot; --&gt; &#123;&quot;cab&quot;, &quot;acb&quot;, &quot;abc&quot;, &quot;cba&quot;, &quot;bca&quot;, bac&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Data structure brainstorm</p><ul><li>hash</li><li>heap</li><li>tree</li></ul></li></ul></li><li><p>Consider the <strong>BCR</strong> (Best Conceivable Runtime)</p><ul><li>The BCR is the best runtime you could conceive of a solution to a problem having.You can easily prove that there is no way you could beat the BCR.</li></ul></li><li><p>Good coding looks like</p><ul><li>correct</li><li>efficient</li><li>simple</li><li>readable</li><li>maintainable<ul><li>use data structures generously</li><li>appropriate code resue</li><li>modular</li><li>flexible and robust</li><li>error checking</li></ul></li></ul></li></ul><h2 id="Power-Table-of-2"><a href="#Power-Table-of-2" class="headerlink" title="Power Table of 2"></a>Power Table of 2</h2><table><thead><tr><th>2^</th><th>=</th><th>approximation</th><th>approximate to</th></tr></thead><tbody><tr><td>7</td><td>128</td><td></td><td></td></tr><tr><td>8</td><td>256</td><td></td><td></td></tr><tr><td>10</td><td>1024</td><td>one thousand</td><td>1K</td></tr><tr><td>16</td><td>65536</td><td></td><td>64K</td></tr><tr><td>20</td><td>1048576</td><td>one million</td><td>1MB</td></tr><tr><td>30</td><td>1073741824</td><td>one billion</td><td>1GB</td></tr><tr><td>32</td><td>4294967296</td><td></td><td>4GB</td></tr><tr><td>40</td><td>1099511627776</td><td>one trillion</td><td>1TB</td></tr></tbody></table><hr><p>Author: <code>Min Gao</code></p>]]></content>
      
      <categories>
          
          <category> computer science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> python </tag>
            
            <tag> swift </tag>
            
            <tag> data-structure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown Syntax</title>
      <link href="/post/42d6409f/"/>
      <url>/post/42d6409f/</url>
      <content type="html"><![CDATA[<h2 id="Heads"><a href="#Heads" class="headerlink" title="Heads"></a>Heads</h2><p>H2 Tag <code>## Title</code><br>H3 Tag <code>### Title</code></p><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><p><em>italic</em>  <code>*italic*</code><br><em>italic</em>  <code>_italic_</code><br><strong>bold</strong>  <code>**bold**</code><br><strong>bold</strong>  <code>__bold__</code><br><del>Strikethrough</del>  <code>~~Strikethrough~~</code>  </p><h2 id="Unordered-lists"><a href="#Unordered-lists" class="headerlink" title="Unordered lists"></a>Unordered lists</h2><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b<ul><li>item 2b1</li></ul></li></ul></li><li>Item 3  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Item 1</span><br><span class="line"><span class="bullet">* </span>Item 2</span><br><span class="line"><span class="code">    * Item 2a</span></span><br><span class="line"><span class="code">    * Item 2b</span></span><br><span class="line"><span class="code">        * item 2b1</span></span><br><span class="line"><span class="bullet">* </span>Item 3</span><br></pre></td></tr></table></figure><h2 id="Ordered-lists"><a href="#Ordered-lists" class="headerlink" title="Ordered lists"></a>Ordered lists</h2><ol><li>first</li></ol><ul><li>second<ol><li>1</li></ol><ul><li>2</li></ul></li><li>third  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>first</span><br><span class="line"><span class="bullet">* </span>second</span><br><span class="line"><span class="code">    1. 1</span></span><br><span class="line"><span class="code">    * 2</span></span><br><span class="line"><span class="bullet">* </span>third</span><br></pre></td></tr></table></figure><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><img src="https://octodex.github.com/images/yaktocat.png" style="zoom:30%">  </p><p>Inline link: <code>![Text](url &quot;Optional title&quot;)</code><br>reference link: <code>![id]: url &quot;Optional title&quot;</code> <code>![Text][id]</code><br>Control size: <code>&lt;img src=&quot;url&quot; style=&quot;zoom:30%&quot; /&gt;</code></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p><a href="http://github.com" target="_blank" rel="noopener">GitHub</a><br>Inline link: <code>[Text](url &quot;Optional title&quot;)</code><br>Reference link: <code>[id]: url &quot;Optional title&quot;</code> <code>[Text][id]</code></p><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><p>As kanye said:</p><blockquote><p>This is a Blockquotes</p><blockquote><p>This is nested blockquote</p><blockquote><p>This is nested nested blockquote  </p></blockquote></blockquote></blockquote><p><code>&gt; content</code><br><code>&gt; &gt; nested conteng</code><br><code>&gt; &gt; &gt; nested nested content</code></p><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p>you can use <code>&lt;TAB&gt;</code>(4 space) to insert a code</p><pre><code>write code here</code></pre><h2 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h2><p>for code <code>python</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delURL</span><span class="params">(text)</span>:</span></span><br><span class="line">  text = re.sub(<span class="string">r"http\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  text = re.sub(<span class="string">r"@\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure></p><p>```python<br>code here<br>```</p><h2 id="Task-lists"><a href="#Task-lists" class="headerlink" title="Task lists"></a>Task lists</h2><ul><li style="list-style: none"><input type="checkbox"> need to do 1</li><li style="list-style: none"><input type="checkbox" checked> already do  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] need to do 1</span><br><span class="line"><span class="bullet">- </span>[x] already do</span><br></pre></td></tr></table></figure><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>cell1</td><td>cell2</td></tr><tr><td>cell3</td><td>cell4</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header</span><br><span class="line">--           | --</span><br><span class="line">cell1        | cell2</span><br><span class="line">cell3        | cell4</span><br></pre></td></tr></table></figure><h2 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h2><div class="video-container"><iframe src="//www.youtube.com/embed/zXOIiAQ-4GI" frameborder="0" allowfullscreen></iframe></div>  <hr><p>Author: <code>Min Gao</code></p>]]></content>
      
      <categories>
          
          <category> computer science </category>
          
          <category> language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
