<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heaven</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="heavenmin.com/"/>
  <updated>2018-06-01T11:24:24.775Z</updated>
  <id>heavenmin.com/</id>
  
  <author>
    <name>Heaven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithm and Data Structure Summary</title>
    <link href="heavenmin.com/post/1398f2ea/"/>
    <id>heavenmin.com/post/1398f2ea/</id>
    <published>2016-06-10T11:52:42.000Z</published>
    <updated>2018-06-01T11:24:24.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Big-O-Concept"><a href="#Big-O-Concept" class="headerlink" title="Big-O Concept"></a>Big-O Concept</h2><p>{O 上界} {Ω Omega 下界} {Θ Theta 上下界}<br><img src="https://raw.githubusercontent.com/HeavenMin/material/master/algorithm/big_O%20complexity.png" alt="big_o_complexity"></p><h2 id="Sorting-Algorithm-Complexity"><a href="#Sorting-Algorithm-Complexity" class="headerlink" title="Sorting Algorithm Complexity"></a>Sorting Algorithm Complexity</h2><p><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sort_algorithm_complexity.png?raw=true" alt="sort_algorithm_complexity"><br><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sorting_algo_gif.gif" alt="sorting_algo_gif"> (credit to: <a href="https://www.toptal.com/developers/sorting-algorithms/" target="_blank" rel="noopener">https://www.toptal.com/developers/sorting-algorithms/</a>)</p><h2 id="Data-Structure"><a href="#Data-Structure" class="headerlink" title="Data Structure"></a>Data Structure</h2><ul><li>array 数组</li><li><p>linked list 链表 {benefit: can add and remove items from the beginning of the list in constant time.}</p><ul><li>doubly linked list 双向链表</li><li><strong>runer rechnique</strong>: iterate through the linked list with two pointers simultaneously (fast and slow)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, next=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init</span><span class="params">(self, value, next=None, prev=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line">        self.prev = prev</span><br></pre></td></tr></table></figure></li></ul></li><li><p>set 集合</p><ul><li>在python中空集是 set()</li><li>dic 字典</li><li>hashtable</li></ul></li><li>list 列表<ul><li>stack 栈 {LIFO} {push, pop, top}</li><li>queue 队列 {FIFO} {enqueue, dequeue, front, rear}<ul><li>priority queue 优先队列<ul><li>heap 堆 <code>see tree</code></li></ul></li></ul></li></ul></li><li><p>graphs 图 {G = &lt;V-vertex, E-edge&gt;} {directed, undirected ,weighted, unweighted}</p><ul><li>complete graph 完全图</li><li>dense graph 稠密图</li><li>spares graph 稀疏图</li><li>{表示方法: adjacency matrix邻接矩阵 - 适合稠密图<br> OR adjacency lists邻接链表 - 适合稀疏图}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjacencyList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a_list = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span><span class="params">(self, from_vertex, to_vertex)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> from_vertex <span class="keyword">in</span> self.a_list.keys():</span><br><span class="line">            self.a_list[from_vertex].append(to_vertex)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.a_list[from_vertex] = [to_vertex]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_a_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> from_v <span class="keyword">in</span> self.a_list:</span><br><span class="line">            print(<span class="string">'&#123;vertex&#125; -&gt;'</span>.format(vertex = from_v), <span class="string">' -&gt; '</span>.join(</span><br><span class="line">                  [str(to_v) <span class="keyword">for</span> to_v <span class="keyword">in</span> self.a_list[from_v]]))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>tree 树 {|E| = |V| - 1}</p><ul><li><p>binary tree 二叉树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br></pre></td></tr></table></figure></li><li><p>tree traversal</p><ul><li>preorder (左中右)</li><li>inorder （中左右)</li><li>postorder (左右中)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        print(tree.val)</span><br><span class="line">        preorder(tree.left)</span><br><span class="line">        preorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        inorder(tree.left)</span><br><span class="line">        print(tree.val)</span><br><span class="line">        inorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        postorder(tree.left)</span><br><span class="line">        postorder(tree.right)</span><br><span class="line">        print(tree.val)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>binary search tree 二叉查找树 {math.floor(logn) &lt;= h &lt;= n-1}</p></li><li>balanced search tree 平衡查找树<ul><li>self-balancing 自平衡查找树<ul><li>AVL tree<ul><li>每个节点的左右子树高度差不超过1</li></ul></li><li>red-black tree 红黑树<ul><li>能容忍同一节点的一棵子树的高度是另一棵子树的两倍</li></ul></li><li>splay tree 分裂树</li></ul></li><li>允许单个节点中包含不只一个元素<ul><li>2-3 tree</li><li>2-3-4 tree</li><li>B tree</li></ul></li></ul></li><li>complete binary tree 完全二叉树</li><li><p>heap (binary heaps) {complete binary tree}</p><ul><li>可以用完全二叉树实现, 树的每一层都是满的，除了最后一层最右边元素可能缺位</li><li>父母优势, 每一个节点的键都要大于等于它子女的键<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     10</span><br><span class="line">   /    \      if using array:</span><br><span class="line">  8      7          parents  leaves</span><br><span class="line"> / \    / \     0   1  2  3| 4  5  6</span><br><span class="line">5   2  6       [ , 10, 8, 7, 5, 2, 6]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Tries (prefix trees)</p><ul><li>TODO</li></ul></li></ul></li></ul><h2 id="Brute-Force-蛮力法"><a href="#Brute-Force-蛮力法" class="headerlink" title="Brute Force 蛮力法"></a>Brute Force 蛮力法</h2><ul><li><p>selection sort 选择排序 {<strong>无论什么情况排序速度一样快</strong>}</p><ul><li>从第一个元素开始从它之后找最小的元素与之交换.</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n^2)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list) - <span class="number">1</span>):</span><br><span class="line">        min_num = list[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(list)):</span><br><span class="line">            min_num = min(min_num, list[j])</span><br><span class="line">        list[list[i:].index(min_num) + i], list[i] = list[i], min_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure></li></ul></li><li><p>bubble sort 冒泡排序 {<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>比较相邻元素并将最大的元素向后沉直到最后，重复这个步骤</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort_upgrade</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        already_sorted = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">                already_sorted = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> already_sorted:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Sequential Search 顺序查找 线性算法</p><ul><li>Time complexity: {Average: Θ(n), Worse: O(n), Best: Ω(1)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search</span><span class="params">(list, k)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, ele <span class="keyword">in</span> enumerate(list):</span><br><span class="line">        <span class="keyword">if</span> ele == k:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>dfs 深度优先查找</p><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, stack, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        vertex = stack.pop()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + stack:</span><br><span class="line">                stack.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure></li></ul></li><li><p>bfs 广度优先查找</p><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|) = O(b^{d})<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, queue, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + queue:</span><br><span class="line">                queue.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Decrease-and-conquer-减治法"><a href="#Decrease-and-conquer-减治法" class="headerlink" title="Decrease-and-conquer 减治法"></a>Decrease-and-conquer 减治法</h2><ul><li><p>insertion sort 插入排序 {<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>从第二个元素开始向前找到正确的位置插入</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insetion_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        insert_num = list[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> list[j] &gt; insert_num:</span><br><span class="line">            list[j + <span class="number">1</span>] = list[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        list[j+ <span class="number">1</span>] = insert_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure></li></ul></li><li><p>shell sort 希尔排序</p><ul><li>通过一个gap来左插入排序(常用方法是从len/2gap开始每次缩小2倍)</li><li>Time complexity: {Average: Θ(n(logn)^2), Worse: O(n(logn)^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    gap = len(list) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(list)):</span><br><span class="line">            temp = list[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> list[j - gap] &gt; temp:</span><br><span class="line">                list[j], list[j - gap] = list[j - gap], temp</span><br><span class="line">                j -= gap</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure></li></ul></li><li><p>generating permutations</p><ul><li>JohnsonTrotter<ul><li>Time complexity: O(n!)</li></ul></li></ul></li><li><p>binary search 折半查找</p><ul><li>Time complexity: {Average: Θ(logn), Worse: O(logn), Best: Ω(1)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(sorted_list, key)</span>:</span></span><br><span class="line">    hi = len(sorted_list) - <span class="number">1</span></span><br><span class="line">    m = hi // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> sorted_list[m] == key:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">elif</span> sorted_list[m] &gt; key:</span><br><span class="line">        <span class="keyword">return</span> binary_search(sorted_list[:m], key)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> binary_search(sorted_list[m + <span class="number">1</span>:], key) + m + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>quick select 快速选择</p><ul><li>寻找第k个最小元素,通过划分来实现</li><li>Time complexity: {Average: Θ(n), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: O(1)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_select_m</span><span class="params">(list, start, end, k_th_min)</span>:</span></span><br><span class="line">    s = partition(list, start, end)</span><br><span class="line">    <span class="keyword">if</span> s == k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list[s]</span><br><span class="line">    <span class="keyword">elif</span> s &gt; k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, start, s - <span class="number">1</span>, k_th_min)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, s + <span class="number">1</span>, end, k_th_min)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Divide-and-conquer-分治法"><a href="#Divide-and-conquer-分治法" class="headerlink" title="Divide-and-conquer 分治法"></a>Divide-and-conquer 分治法</h2><p>分解问题，求解子问题，合并自问题的解<br>T(n) = aT(n/b) + f(n) {a个需要求解的问题，问题被分成b个，f(n)的分解合并时间消耗}<br>T(n) = <code>O(n^d) if a &lt; b^d</code> or <code>O(n^dlogn) if a = b^d</code> or <code>O(n^log_b(a)) if a &gt; b^d</code></p><ul><li><p>merge sort 归并排序 {<strong>除了heapsort以外唯一BestAveWorst全是O(nlogn)排序算法</strong>}</p><ul><li>两种实现方法(自顶向下-递归， 自底向上-循环)</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(n)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(list) &gt; <span class="number">1</span>:</span><br><span class="line">        list_b = list[:len(list) // <span class="number">2</span>]</span><br><span class="line">        list_c = list[len(list) // <span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">return</span> merge(merge_sort(list_b), merge_sort(list_c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list_b, list_c)</span>:</span></span><br><span class="line">    list_a = list_b + list_c    <span class="comment">#init list_a</span></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(list_b) <span class="keyword">and</span> j &lt; len(list_c):</span><br><span class="line">        <span class="keyword">if</span> list_b[i] &lt;= list_c[j]:</span><br><span class="line">            list_a[k] = list_b[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_a[k] = list_c[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == len(list_b):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(j, len(list_c)):</span><br><span class="line">            list_a[k] = list_c[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j == len(list_c):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(i, len(list_b)):</span><br><span class="line">            list_a[k] = list_b[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> list_a</span><br></pre></td></tr></table></figure></li></ul></li><li><p>quick sort 快速排序   {<strong>pivot的选择对于算法效率至关重要</strong>}</p><ul><li>不断选择pivot来将元素划分到它的左右来实现</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(n^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(nlogn)}</li><li>pivot每次选第一个在已经排好序的数组上时间效率是O(n^2)<ul><li>优化方法<ul><li>使用随机pivot, 平均划分pivot, 快排好后使用插入排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_m</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        pivot = partition(list, start, end)</span><br><span class="line">        quick_sort_m(list, start, pivot - <span class="number">1</span>)</span><br><span class="line">        quick_sort_m(list, pivot + <span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="Transform-and-conquer-变治法"><a href="#Transform-and-conquer-变治法" class="headerlink" title="Transform-and-conquer 变治法"></a>Transform-and-conquer 变治法</h2><ul><li>预排序解决问题<ul><li>检查数组中元素的唯一性</li><li>算法数组的模式 （一个数组中最多的元素)</li></ul></li><li><p>heap sort 堆排序</p><ul><li>先构建一个堆, 不断的删除最大键，</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    heapq.heapify(list)</span><br><span class="line">    <span class="keyword">return</span> [heapq.heappop(list) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list))]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Problem reduction 问题简化 {已有一种方法求其他问题}</p><ul><li>lcm(m, n) <em> gcd(m, n) = m </em> n {lcm: 最小公倍数, gcd: 最大公约数}</li><li>求一个函数的最小值， 可以求一个函数负函数的最大值的负数</li></ul></li><li>hash table<ul><li>需要把键在hash table 中尽可能均匀分布</li><li>平均插入，删除， 查找效率都是 O(1), 当最坏情况全部冲突到一个位置时候，退化到 O(n)</li><li>open hasing, also: separate chaining 分离链 开hash</li><li>closed hashing 闭hash</li><li>double hashing</li><li>rehasing</li></ul></li><li>B树</li></ul><h2 id="dynamic-programming-动态规划"><a href="#dynamic-programming-动态规划" class="headerlink" title="dynamic programming 动态规划"></a>dynamic programming 动态规划</h2><ul><li><p>与其对交叠的子问题一次又一次地求解，还不如对每个较小的子问题只求解一次并把结果记录在表中。 (对具有交叠子问题的问题进行求解的技术)</p><ul><li>类似斐波那契数</li><li><p>coins_row problem (求互不相临的最大金币总金额)</p><ul><li>Time complexity: O(n), Space complexity: O(n)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin_row</span><span class="params">(coins)</span>:</span></span><br><span class="line">    coin1, coin2 = coins[<span class="number">0</span>], coins[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i, coin <span class="keyword">in</span> enumerate(coins[<span class="number">2</span>:]):</span><br><span class="line">        coin1, coin2 = coin2, max(coin1 + coin, coin2)</span><br><span class="line">    <span class="keyword">return</span> coin2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>change_making problem</p><ul><li>Time complexity: O(mn), Space complexity: O(n)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_making</span><span class="params">(coins, change)</span>:</span></span><br><span class="line">    count = [<span class="number">0</span>] * change</span><br><span class="line">    count[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, change):</span><br><span class="line">        tmp = float(<span class="string">'inf'</span>)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= len(coins) <span class="keyword">and</span> j &lt; len(coins) <span class="keyword">and</span> i &gt;= coins[j]:</span><br><span class="line">            tmp = min(count[i - coins[j]], tmp)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        count[i] = tmp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>knapsack problem 背包问题</p><ul><li>Time complexity: O(nW), Space complexity: O(nW)</li><li>#TODO</li></ul></li><li>Memory Function 记忆功能</li></ul></li></ul><h2 id="Greedy-Technique-贪婪技术"><a href="#Greedy-Technique-贪婪技术" class="headerlink" title="Greedy Technique 贪婪技术"></a>Greedy Technique 贪婪技术</h2><ul><li><p>Prim</p><ul><li>构造最小生成树算法</li><li>先随机选一个点，每次扩展新的点使得这个新的点到已有点的距离最短，直到添加完所有顶点<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Kruskal</p><ul><li>构造最小生成树算法</li><li>先按照权重将边进行排序，然后不断把边加入子图，如果加入此边会产生回路，则天国，直到完成<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Dijkstra</p><ul><li>单起点最短路径问题<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="How-to-optimaize-the-algorithm"><a href="#How-to-optimaize-the-algorithm" class="headerlink" title="How to optimaize the algorithm"></a>How to optimaize the algorithm</h2><ul><li><p>Optimaize &amp; Solve Technique</p><ul><li>Look for <strong>BUD</strong><ul><li>Bottlenecks</li><li>Unnecessary work</li><li>Duplicated work</li></ul></li><li>DIY (Do It Yourself)</li><li>Simplify and Generalize</li><li><p>Base Case and Build (always use for recursion)</p><ul><li>like for generate permutations  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 Case &quot;a&quot; --&gt; &#123;&quot;a&quot;&#125;</span><br><span class="line">2 Case &quot;ab&quot; --&gt; &#123;&quot;ab&quot;, &quot;ba&quot;&#125;</span><br><span class="line">3 Case &quot;abc&quot; --&gt; &#123;&quot;cab&quot;, &quot;acb&quot;, &quot;abc&quot;, &quot;cba&quot;, &quot;bca&quot;, bac&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Data structure brainstorm</p><ul><li>hash</li><li>heap</li><li>tree</li></ul></li></ul></li><li><p>Consider the <strong>BCR</strong> (Best Conceivable Runtime)</p><ul><li>The BCR is the best runtime you could conceive of a solution to a problem having.You can easily prove that there is no way you could beat the BCR.</li></ul></li><li><p>Good coding looks like</p><ul><li>correct</li><li>efficient</li><li>simple</li><li>readable</li><li>maintainable<ul><li>use data structures generously</li><li>appropriate code resue</li><li>modular</li><li>flexible and robust</li><li>error checking</li></ul></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Big-O-Concept&quot;&gt;&lt;a href=&quot;#Big-O-Concept&quot; class=&quot;headerlink&quot; title=&quot;Big-O Concept&quot;&gt;&lt;/a&gt;Big-O Concept&lt;/h2&gt;&lt;p&gt;{O 上界} {Ω Omega 下界} {Θ The
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
    
      <category term="algorithm" scheme="heavenmin.com/tags/algorithm/"/>
    
      <category term="data structure" scheme="heavenmin.com/tags/data-structure/"/>
    
      <category term="python" scheme="heavenmin.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Test</title>
    <link href="heavenmin.com/post/42d6409f/"/>
    <id>heavenmin.com/post/42d6409f/</id>
    <published>2016-05-29T23:38:13.000Z</published>
    <updated>2018-05-30T07:44:44.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-syntax-with-h2-tag"><a href="#Markdown-syntax-with-h2-tag" class="headerlink" title="Markdown syntax(with h2 tag)"></a>Markdown syntax(with h2 tag)</h2><h4 id="Emphasis-h4-tag"><a href="#Emphasis-h4-tag" class="headerlink" title="Emphasis(h4 tag)"></a>Emphasis(h4 tag)</h4><p><em>italic</em><br><em>italic</em><br><strong>bold</strong><br><strong>bold</strong><br><del>Strikethrough</del></p><h4 id="Unordered-lists"><a href="#Unordered-lists" class="headerlink" title="Unordered lists"></a>Unordered lists</h4><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b<ul><li>item 2b1</li></ul></li></ul></li><li>Item 3</li></ul><h4 id="Ordered-lists"><a href="#Ordered-lists" class="headerlink" title="Ordered lists"></a>Ordered lists</h4><ol><li>first</li></ol><ul><li>second<ol><li>1</li></ol><ul><li>2</li></ul></li><li>third</li></ul><h4 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h4><p><img src="https://octodex.github.com/images/yaktocat.png" alt="Image name"><br>Format: <code>![Text](url)</code></p><h4 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h4><p><a href="http://github.com" target="_blank" rel="noopener">the links of gitHub</a></p><h4 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h4><p>As kanye said:</p><blockquote><p>This is a Blockquotes</p></blockquote><h4 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h4><p>you can use <code>&lt;addr&gt;</code> to insert a code</p><pre><code>write code here</code></pre><h4 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h4><p>for code<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delURL</span><span class="params">(text)</span>:</span></span><br><span class="line">  text = re.sub(<span class="string">r"http\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  text = re.sub(<span class="string">r"@\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure></p><h4 id="Task-lists"><a href="#Task-lists" class="headerlink" title="Task lists"></a>Task lists</h4><ul><li style="list-style: none"><input type="checkbox"> need to do 1</li><li style="list-style: none"><input type="checkbox" checked> already do</li></ul><h4 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h4><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>cell1</td><td>cell2</td></tr><tr><td>cell3</td><td>cell4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Markdown-syntax-with-h2-tag&quot;&gt;&lt;a href=&quot;#Markdown-syntax-with-h2-tag&quot; class=&quot;headerlink&quot; title=&quot;Markdown syntax(with h2 tag)&quot;&gt;&lt;/a&gt;Mark
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
      <category term="language" scheme="heavenmin.com/categories/computer-science/language/"/>
    
    
      <category term="markdown" scheme="heavenmin.com/tags/markdown/"/>
    
  </entry>
  
</feed>
