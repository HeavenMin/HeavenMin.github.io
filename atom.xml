<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heaven</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="heavenmin.com/"/>
  <updated>2018-08-23T13:21:43.379Z</updated>
  <id>heavenmin.com/</id>
  
  <author>
    <name>Heaven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>地球两点大圆距离计算算法 (经度纬度)</title>
    <link href="heavenmin.com/post/31c71a71/"/>
    <id>heavenmin.com/post/31c71a71/</id>
    <published>2018-07-18T12:25:59.000Z</published>
    <updated>2018-08-23T13:21:43.379Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The great-circle distance or orthodromic distance is the shortest distance between two points on the surface of a sphere, measured along the surface of the sphere (as opposed to a straight line through the sphere’s interior). The distance between two points in Euclidean space is the length of a straight line between them, but on the sphere there are no straight lines. In spaces with curvature, straight lines are replaced by geodesics. Geodesics on the sphere are circles on the sphere whose centers coincide with the center of the sphere, and are called great circles. –wiki</p></blockquote><p><strong>大圆距离</strong> (Great-circle distance) 是指从球面的一点到球面的另一点所经过的最短路径的长度。一般是连接这两个点较短的一条弧的长度。</p><p>地理位置两点之间的距离，就是这个大圆距离。想要计算这个大圆距离，并不能直接用类似在直角坐标系中通过勾股定理计算直线距离那样计算。地理位置信息一般采用经度和纬度，以弧度制度量。一般有两种算法来计算：</p><ul><li>如果将地球当作球体 (sphere)<ul><li>使用 半正矢公式 (Haversine formula)</li></ul></li><li>如果将地球当作椭球体 (ellipsoid)<ul><li>使用 Vincenty’s formulae</li></ul></li></ul><p>Vincenty’s formulae 由于将地球当作椭球体来计算，会有更高的精度， 但是计算效率会比Haversine formula略低。</p><h2 id="Haversine-formula-半正矢公式"><a href="#Haversine-formula-半正矢公式" class="headerlink" title="Haversine formula (半正矢公式)"></a>Haversine formula (半正矢公式)</h2><p>以下是一个通过 Haversine formula 用已知两点经度纬度的前提下，计算出大圆距离的代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line">__author__ = <span class="string">'Min'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">EARTH_RADUIS = <span class="number">6378.137</span>    <span class="comment"># kilometre</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDistance</span><span class="params">(lat1, long1, lat2, long2, decimal_digits=<span class="number">6</span>)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Function to get two-point distance by longtitude and latitude</span></span><br><span class="line"><span class="string">    average runtime for this function is about 0.000006 sec.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Eample:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-35.308228, 149.124358, -33.868883, 151.209301)</span></span><br><span class="line"><span class="string">    249.349728</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, -33.868883, 151.209301)</span></span><br><span class="line"><span class="string">    714.257887</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, 31.231981, 121.492631)</span></span><br><span class="line"><span class="string">    8063.801696</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; getDistance(-37.813971, 144.962921, 31.231981, 121.492631, 3)</span></span><br><span class="line"><span class="string">    8063.802</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> abs(lat1) &lt;= <span class="number">90</span> <span class="keyword">and</span> abs(lat2) &lt;= <span class="number">90</span>, <span class="string">"invalid latitude"</span></span><br><span class="line">    <span class="keyword">assert</span> abs(long1) &lt;= <span class="number">180</span> <span class="keyword">and</span> abs(long2) &lt;= <span class="number">180</span>, <span class="string">"invalid longtigude"</span></span><br><span class="line">    rad_lat1 = math.radians(lat1)</span><br><span class="line">    rad_lat2 = math.radians(lat2)</span><br><span class="line">    rad_long1 = math.radians(long1)</span><br><span class="line">    rad_long2 = math.radians(long2)</span><br><span class="line">    a = rad_lat1 - rad_lat2</span><br><span class="line">    b = rad_long1 - rad_long2</span><br><span class="line">    s = (<span class="number">2</span> * math.asin(math.sqrt(math.pow(math.sin(a / <span class="number">2</span>), <span class="number">2</span>) +</span><br><span class="line">         math.cos(rad_lat1) * math.cos(rad_lat2) *</span><br><span class="line">         math.pow(math.sin(b / <span class="number">2</span>), <span class="number">2</span>))))</span><br><span class="line">    distance = s * EARTH_RADUIS</span><br><span class="line">    <span class="keyword">return</span> round(distance,decimal_digits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Canberra to Sydney</span></span><br><span class="line">    print(getDistance(<span class="number">-35.308228</span>, <span class="number">149.124358</span>, <span class="number">-33.868883</span>, <span class="number">151.209301</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Melbourne to Sydney</span></span><br><span class="line">    print(getDistance(<span class="number">-37.813971</span>, <span class="number">144.962921</span>, <span class="number">-33.868883</span>, <span class="number">151.209301</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Melbourne to Shanghai</span></span><br><span class="line">    print(getDistance(<span class="number">-37.813971</span>, <span class="number">144.962921</span>, <span class="number">31.231981</span>, <span class="number">121.492631</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br><span class="line">    _main()</span><br></pre></td></tr></table></figure></p><p>通过测试数据得知:</p><table><thead><tr><th>From</th><th>To</th><th>Distance (km)</th></tr></thead><tbody><tr><td>堪培拉</td><td>悉尼</td><td>249.349728</td></tr><tr><td>墨尔本</td><td>悉尼</td><td>714.257887</td></tr><tr><td>墨尔本</td><td>上海</td><td>8063.801696</td></tr></tbody></table><p>还是比较精确的。 在不需要太精准的情况，可以使用Haversine formula (半正矢公式)来计算地球上两点之间的大圆距离。</p><h2 id="Vincenty’s-formulae"><a href="#Vincenty’s-formulae" class="headerlink" title="Vincenty’s formulae"></a>Vincenty’s formulae</h2><p>-TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;The great-circle distance or orthodromic distance is the shortest distance between two points on the surface of a sphere, me
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
    
      <category term="great-circle-distance" scheme="heavenmin.com/tags/great-circle-distance/"/>
    
      <category term="algorithm" scheme="heavenmin.com/tags/algorithm/"/>
    
      <category term="python" scheme="heavenmin.com/tags/python/"/>
    
      <category term="geospatial" scheme="heavenmin.com/tags/geospatial/"/>
    
  </entry>
  
  <entry>
    <title>Git Syntax</title>
    <link href="heavenmin.com/post/5c6afe15/"/>
    <id>heavenmin.com/post/5c6afe15/</id>
    <published>2016-07-01T06:10:24.000Z</published>
    <updated>2018-08-16T05:30:09.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Syntax"><a href="#Git-Syntax" class="headerlink" title="Git Syntax"></a>Git Syntax</h1><h2 id="Git-Workflow"><a href="#Git-Workflow" class="headerlink" title="Git Workflow"></a>Git Workflow</h2><p><img src="https://github.com/HeavenMin/material/blob/master/other_image/git_workflow.png?raw=true" alt="git_workflow"></p><h2 id="Git-Version-Control-Rules"><a href="#Git-Version-Control-Rules" class="headerlink" title="Git Version Control Rules"></a>Git Version Control Rules</h2><ul><li>Commit related changes</li><li><strong>Test code</strong> before you commit</li><li>Use branches</li><li>Commit often</li><li>Write <strong>good commit messages</strong></li><li>Agree on a workflow</li><li>Don’t commit <strong>half-done</strong> work</li><li>Version control is not a backup system</li></ul><h2 id="Syntax-Cheat-Sheet"><a href="#Syntax-Cheat-Sheet" class="headerlink" title="Syntax Cheat Sheet"></a>Syntax Cheat Sheet</h2><table><thead><tr><th>Original syntax</th><th>Alias</th><th>Purpose</th></tr></thead><tbody><tr><td>git help <command></td><td>N/A</td><td><em>获得命令的帮助指南</em></td></tr><tr><td><strong>CREATE</strong></td><td></td><td></td></tr><tr><td>git init</td><td>N/A</td><td><em>Git仓库初始化</em></td></tr><tr><td>git clone <address></address></td><td>N/A</td><td><em>克隆一个现存的库</em></td></tr><tr><td><strong>LOCAL CHANGES</strong></td><td></td><td></td></tr><tr><td>git add <file></file></td><td>ga &lt;&gt;</td><td><em>添加指定文件</em></td></tr><tr><td>git add –all / git add .</td><td><strong>gaa</strong></td><td><em>添加所有修改文件</em></td></tr><tr><td>git commit -m “info”</td><td><strong>gcmsg “”</strong></td><td><em>提交文件到仓库</em></td></tr><tr><td>git commit –amend</td><td>N/A</td><td><em>修改上一次commit内容</em></td></tr><tr><td>git status</td><td><strong>gst</strong></td><td><em>检查仓库当前状态</em></td></tr><tr><td>git status -sb</td><td><strong>gsb</strong></td><td><em>精简检查仓库状态</em></td></tr><tr><td>git diff</td><td>gd</td><td><em>查看修改内容</em></td></tr><tr><td>git diff HEAD – <file></file></td><td>N/A</td><td><em>查看工作区与版本库的区别</em></td></tr><tr><td><strong>COMMIT HISTORY</strong></td><td></td><td></td></tr><tr><td>git log</td><td>glg / g lg</td><td><em>查看历史记录</em></td></tr><tr><td>git reflog</td><td>N/A</td><td><em>记录每一次命令,可以查要回到未来的版本</em></td></tr><tr><td>git blame <file></file></td><td>N/A</td><td><em>查看指定文件的更改记录</em></td></tr><tr><td><strong>UNDO</strong></td><td></td><td></td></tr><tr><td>git reset –hard &lt;HEAD^&gt;</td><td>grhh &lt;&gt;</td><td><em>回退到指定版本(commit id)</em></td></tr><tr><td>git reset HEAD <file></file></td><td>grh HEAD &lt;&gt;</td><td><em>将暂存区的修改撤销，放回工作区</em></td></tr><tr><td>git checkout – <file></file></td><td>gco – &lt;&gt;</td><td><em>撤销最近一次修改</em></td></tr><tr><td><strong>BRANCHES &amp; TAGS</strong></td><td></td><td></td></tr><tr><td>git checkout -b <branchname></branchname></td><td><strong>gcb &lt;&gt;</strong></td><td><em>创建一个分支并直接切换到该分支</em></td></tr><tr><td>git checkout <branchname></branchname></td><td>gco &lt;&gt;</td><td><em>切换到一个分支</em></td></tr><tr><td>git branch</td><td>gb</td><td><em>查看当前分支</em></td></tr><tr><td>git branch <branchname></branchname></td><td>gb &lt;&gt;</td><td><em>创建一个分支</em></td></tr><tr><td>git branch -d <branchname></branchname></td><td>gbd &lt;&gt;</td><td><em>删除一个分支</em></td></tr><tr><td>git branch -D <branchname></branchname></td><td>N/A</td><td><em>强制删除一个分支</em></td></tr><tr><td>git merge <branchname></branchname></td><td>gm &lt;&gt;</td><td><em>合并分支</em></td></tr><tr><td>git merge –no–ff -m “info” <b></b></td><td>N/A</td><td><em>合并分支并禁用Fast forward</em></td></tr><tr><td>git tag &lt;v1.0&gt;</td><td>N/A</td><td><em>打一个新标签</em></td></tr><tr><td>git tag</td><td>N/A</td><td><em>查看素有标签</em></td></tr><tr><td>git tag &lt;v1.0&gt; <commit id=""></commit></td><td>N/A</td><td><em>给指定历史提交的commit打标签</em></td></tr><tr><td>git tag -a <v> -m “info” <cid></cid></v></td><td>N/A</td><td><em>打标签的同时增加说明文字</em></td></tr><tr><td>git show <tagname></tagname></td><td>N/A</td><td><em>查看标签信息</em></td></tr><tr><td>git tag -d &lt;v1.0&gt;</td><td>N/A</td><td><em>删除指定本地标签</em></td></tr><tr><td><strong>STASH</strong></td><td></td><td></td></tr><tr><td>git stash</td><td>N/A</td><td><em>将工作区内容储藏起来</em></td></tr><tr><td>git stash save “info”</td><td>gsta “”</td><td><em>将工作区内容储藏起来,并加注释</em></td></tr><tr><td>git stash list</td><td>gstl</td><td><em>查看stash列表</em></td></tr><tr><td>git stash pop</td><td>gstp</td><td><em>恢复最顶层暂存区并删除</em></td></tr><tr><td>git stash apply &lt;stash@{0}&gt;</td><td>gstaa &lt;&gt;</td><td><em>恢复指定暂存区</em></td></tr><tr><td>git stash drop &lt;stash@{0}&gt;</td><td>gstd &lt;&gt;</td><td><em>删除指定暂存区</em></td></tr><tr><td><strong>UPDATE &amp; PUBLISH</strong></td><td></td><td></td></tr><tr><td>git remote -v</td><td>grv</td><td><em>查看远程库信息</em></td></tr><tr><td>git push <orgin master=""></orgin></td><td>gp &lt;&gt;</td><td><em>推送到远程服务器</em></td></tr><tr><td>git push orgin master</td><td>gpom</td><td><em>推送到远程master分支</em></td></tr><tr><td>git pull</td><td>gl</td><td><em>抓取最新更新</em></td></tr><tr><td>gcb <branch> origin/<branch></branch></branch></td><td>N/A</td><td><em>在本地创建与远程分支对应的分支</em></td></tr><tr><td>gb –set-upstream-to &lt;&gt; origin/&lt;&gt;</td><td>ggsup</td><td><em>建立本地分支与远程分支的链接关系</em></td></tr><tr><td>git branch -dr origin/<branch></branch></td><td>N/A</td><td><em>删除远程指定分支</em></td></tr><tr><td>git push origin :refs/tags/v1.0</td><td>N/A</td><td><em>删除远程指定标签</em></td></tr><tr><td>git push origin <tagname></tagname></td><td>N/A</td><td><em>推送指定本地标签到远程</em></td></tr><tr><td>git push origin –tags</td><td>N/A</td><td><em>推送全部本地标签到远程</em></td></tr><tr><td>git check-ignore -v <file></file></td><td>N/A</td><td><em>检查忽略规则</em></td></tr></tbody></table><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>将需要忽略的文件添加进 <code>.gitignore</code></p><h2 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h2><p>一般生成在 <code>~/.ssh</code> 目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f youtkeyname.key          //-f 指定生成的密钥文件名字</span><br><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  //-C 提供一个注释</span><br></pre></td></tr></table></figure></p><h2 id="创建新仓库-amp-关联本地仓库"><a href="#创建新仓库-amp-关联本地仓库" class="headerlink" title="创建新仓库 &amp; 关联本地仓库"></a>创建新仓库 &amp; 关联本地仓库</h2><ul><li>先在GitHub上创建新respository后直接克隆到本地 (推荐方法)  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Username/projectname.git</span><br></pre></td></tr></table></figure><ul><li>与本地创建的本地仓库关联  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Username/projectname.git</span><br><span class="line">git push -u origin master  //第一次push未关联时候使用-u</span><br></pre></td></tr></table></figure><h2 id="云主机SSH快捷设置"><a href="#云主机SSH快捷设置" class="headerlink" title="云主机SSH快捷设置"></a>云主机SSH快捷设置</h2><p>在 <code>~/.ssh/config</code> 中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host hostName</span><br><span class="line">    User user_name</span><br><span class="line">    HostName xxx.xxx.xxx.xxx    // IP address</span><br><span class="line">    IdentityFile ~/.ssh/your_private_key    // private key position, if needed</span><br></pre></td></tr></table></figure></p><p>在 <code>~/.ssh/known_hosts</code>里存的信任ssh服务器列表</p><hr><p>Author: Min</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-Syntax&quot;&gt;&lt;a href=&quot;#Git-Syntax&quot; class=&quot;headerlink&quot; title=&quot;Git Syntax&quot;&gt;&lt;/a&gt;Git Syntax&lt;/h1&gt;&lt;h2 id=&quot;Git-Workflow&quot;&gt;&lt;a href=&quot;#Git-Workf
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
    
      <category term="git" scheme="heavenmin.com/tags/git/"/>
    
      <category term="github" scheme="heavenmin.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm and Data Structure Summary</title>
    <link href="heavenmin.com/post/1398f2ea/"/>
    <id>heavenmin.com/post/1398f2ea/</id>
    <published>2016-06-10T11:52:42.000Z</published>
    <updated>2018-08-23T12:28:42.611Z</updated>
    
    <content type="html"><![CDATA[<p>算法与数据结构汇总</p><h2 id="Big-O-Concept"><a href="#Big-O-Concept" class="headerlink" title="Big-O Concept"></a>Big-O Concept</h2><p>{O 上界} {Ω Omega 下界} {Θ Theta 上下界}<br><img src="https://raw.githubusercontent.com/HeavenMin/material/master/algorithm/big_O%20complexity.png" alt="big_o_complexity"></p><h2 id="Sorting-Algorithm-Complexity"><a href="#Sorting-Algorithm-Complexity" class="headerlink" title="Sorting Algorithm Complexity"></a>Sorting Algorithm Complexity</h2><p><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sort_algorithm_complexity.png?raw=true" alt="sort_algorithm_complexity"><br><img src="https://github.com/HeavenMin/material/blob/master/algorithm/sorting_algo_gif.gif?raw=true" alt="sorting_algo_gif"> (credit to: <a href="https://www.toptal.com/developers/sorting-algorithms/" target="_blank" rel="noopener">https://www.toptal.com/developers/sorting-algorithms/</a>)</p><h2 id="Data-Structure-数据结构"><a href="#Data-Structure-数据结构" class="headerlink" title="Data Structure 数据结构"></a>Data Structure 数据结构</h2><h3 id="array-数组"><a href="#array-数组" class="headerlink" title="array 数组"></a>array 数组</h3><ul><li>特性<ul><li>ordered</li><li>random-access (constant O(1) time access)</li><li>get_length - O(1)</li><li>append_last - O(1)</li></ul></li></ul><h3 id="dictionary-字典"><a href="#dictionary-字典" class="headerlink" title="dictionary 字典"></a>dictionary 字典</h3><p><code>key-value</code> <code>hashable</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">scores = &#123;<span class="string">"Eric"</span>: <span class="number">90</span>, <span class="string">"Mark"</span>: <span class="number">80</span>, <span class="string">"Wayne"</span>: <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> scores: [<span class="type">String</span>: <span class="type">Int</span>] = [<span class="string">"Eric"</span>: <span class="number">90</span>, <span class="string">"Mark"</span>: <span class="number">80</span>, <span class="string">"Wayne"</span>: <span class="number">60</span>]</span><br></pre></td></tr></table></figure><h3 id="linked-list-链表"><a href="#linked-list-链表" class="headerlink" title="linked list 链表"></a>linked list 链表</h3><blockquote><p>benefit: can add and remove items from the beginning of the list in constant time.</p></blockquote><p><code>singly linked list 单向链表</code>, <code>doubly linked list 双向链表</code></p><ul><li><strong>runer technique</strong>: iterate through the linked list with two pointers simultaneously (fast and slow)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment"># singly linked list 单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, next=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="comment"># doubly linked list 双向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, next=None, prev=None)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.next = next</span><br><span class="line">        self.prev = prev</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// singly linked list 单向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinglyLinkedListNode</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">SinglyLinkedListNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Value</span>, next: <span class="type">SinglyLinkedListNode</span>?=<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.next = next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// doubly linked list 双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedListNode</span>&lt;<span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">DoublyLinkedListNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> prev: <span class="type">DoublyLinkedListNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Value</span>, next: <span class="type">DoublyLinkedListNode</span>?=<span class="literal">nil</span>, prev: <span class="type">DoublyLinkedListNode</span>?=<span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">        <span class="keyword">self</span>.next =next</span><br><span class="line">        <span class="keyword">self</span>.prev = prev</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h3><blockquote><p>unordered collecition of unique values</p></blockquote><ul><li>dic 字典</li><li>hashtable</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">my_set = set([<span class="number">1</span>,<span class="number">2</span>])    <span class="comment"># + - &amp; | ^</span></span><br><span class="line">empty_set = set()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">var</span> my_set: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> my_set2 = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()</span><br></pre></td></tr></table></figure><h3 id="list-列表"><a href="#list-列表" class="headerlink" title="list 列表"></a>list 列表</h3><p><code>stack</code> <code>queue</code> <code>priority queue</code> <code>heap</code></p><h4 id="stack-栈"><a href="#stack-栈" class="headerlink" title="stack 栈"></a>stack 栈</h4><blockquote><p><code>{LIFO}</code> {push, pop, top, isEmpty}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">stack = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">stack.append(<span class="number">4</span>)</span><br><span class="line">num = stack.pop()   <span class="comment"># &gt;&gt;&gt; 4</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> stack: [<span class="type">E</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: E)</span></span> &#123;</span><br><span class="line">        stack.append(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">E</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.popLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h4><blockquote><p><code>{FIFO}</code> {enqueue, dequeue, front, rear, isEmpty}</p></blockquote><ul><li>can be created in four ways:<ul><li>array - {dequeue in this struct takes O(n)}</li><li>doubly linked list - {elements aren’t in contiguous blocks of memory. will increase access time}</li><li>ring buffer - {fixed size}</li><li>two stacks - {best}</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="comment"># double ended queue</span></span><br><span class="line"><span class="comment"># deque 在首尾两端快速插入和删除而设计</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue  = deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">queue.append(<span class="number">4</span>)</span><br><span class="line">queue.popleft()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueStack</span>&lt;<span class="title">T</span>&gt;: <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> leftStack: [<span class="type">T</span>] = []</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> rightStack: [<span class="type">T</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> leftStack.isEmpty &amp;&amp; rightStack.isEmpty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> peek: <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> !leftStack.isEmpty ? leftStack.last : rightStack.first</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">enqueue</span><span class="params">(<span class="number">_</span> element: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        rightStack.append(element)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">dequeue</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> leftStack.isEmpty &#123;</span><br><span class="line">            leftStack = rightStack.reversed()</span><br><span class="line">            rightStack.removeAll()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftStack.popLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority queue 优先队列"></a>priority queue 优先队列</h5><!-- TODO  --><h5 id="heap-堆"><a href="#heap-堆" class="headerlink" title="heap 堆"></a>heap 堆</h5><blockquote><p>can also be developed in tree structure<br>[<!-- TODO  -->]</p></blockquote><h3 id="graph-图"><a href="#graph-图" class="headerlink" title="graph 图"></a>graph 图</h3><blockquote><p>{G = &lt;V-vertex, E-edge&gt;} {directed, undirected ,weighted, unweighted}</p></blockquote><ul><li>complete graph 完全图</li><li>dense graph 稠密图</li><li>spares graph 稀疏图</li><li>{表示方法: adjacency matrix邻接矩阵 - 适合稠密图 &amp; adjacency lists邻接链表 - 适合稀疏图}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjacencyList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a_list = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addEdge</span><span class="params">(self, from_vertex, to_vertex)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> from_vertex <span class="keyword">in</span> self.a_list.keys():</span><br><span class="line">            self.a_list[from_vertex].append(to_vertex)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.a_list[from_vertex] = [to_vertex]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_a_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> from_v <span class="keyword">in</span> self.a_list:</span><br><span class="line">            print(<span class="string">'&#123;vertex&#125; -&gt;'</span>.format(vertex = from_v), <span class="string">' -&gt; '</span>.join(</span><br><span class="line">                  [str(to_v) <span class="keyword">for</span> to_v <span class="keyword">in</span> self.a_list[from_v]]))</span><br></pre></td></tr></table></figure><h3 id="tree-树"><a href="#tree-树" class="headerlink" title="tree 树"></a>tree 树</h3><blockquote><p>{|E| = |V| - 1}</p></blockquote><ul><li>tree</li><li>binary tree</li><li>binary search tree (BST) 二叉查找树 {math.floor(logn) &lt;= h &lt;= n-1}</li><li>balanced search tree 平衡查找树<ul><li>self-balancing 自平衡查找树<ul><li>AVL tree<ul><li>每个节点的左右子树高度差不超过1</li></ul></li><li>red-black tree 红黑树<ul><li>能容忍同一节点的一棵子树的高度是另一棵子树的两倍</li></ul></li><li>splay tree 分裂树</li></ul></li><li>允许单个节点中包含不只一个元素<ul><li>2-3 tree</li><li>2-3-4 tree</li><li>B tree</li></ul></li></ul></li><li>complete binary tree 完全二叉树</li><li>heap (binary heaps) {complete binary tree}<ul><li>可以用完全二叉树实现, 树的每一层都是满的，除了最后一层最右边元素可能缺位</li><li>父母优势, 每一个节点的键都要大于等于它子女的键  </li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     10</span><br><span class="line">   /    \      if using array:</span><br><span class="line">  8      7          parents  leaves</span><br><span class="line"> / \    / \     0   1  2  3| 4  5  6</span><br><span class="line">5   2  6       [ , 10, 8, 7, 5, 2, 6]</span><br></pre></td></tr></table></figure><ul><li>Trie tree (prefix trees) 单词查找树<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    root</span><br><span class="line">   /    \</span><br><span class="line">  T      C</span><br><span class="line"> / \    / \</span><br><span class="line">R.  O. A.  O.</span><br></pre></td></tr></table></figure></li></ul><h4 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.children = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(child)</span>:</span></span><br><span class="line">        children.append(child)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">T</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> children: [<span class="type">TreeNode</span>] = []</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> value: <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> child: TreeNode)</span></span> &#123;</span><br><span class="line">        children.append(child)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="binary-tree-二叉树"><a href="#binary-tree-二叉树" class="headerlink" title="binary tree 二叉树"></a>binary tree 二叉树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="comment">// draw the tree</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> diagram(<span class="keyword">for</span>: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">diagram</span><span class="params">(<span class="keyword">for</span> node: BinaryTreeNode?,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> top: String = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> root: String = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="number">_</span> bottom: String = <span class="string">""</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root + <span class="string">"nil\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> root + <span class="string">"<span class="subst">\(node.val)</span>\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diagram(<span class="keyword">for</span>: node.<span class="keyword">right</span>, top + <span class="string">" "</span>, top + <span class="string">"┌──"</span>, top + <span class="string">"│ "</span>)</span><br><span class="line">            + root + <span class="string">"<span class="subst">\(node.val)</span>\n"</span></span><br><span class="line">            + diagram(<span class="keyword">for</span>: node.<span class="keyword">left</span>, bottom + <span class="string">"│ "</span>, bottom + <span class="string">"└──"</span>, bottom + <span class="string">" "</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: This BinaryTreeNode discription algorithm from <a href="https://www.objc.io/books/optimizing-collections/" target="_blank" rel="noopener">Optimizing Collections</a></p><ul><li>tree traversal<ul><li>preorder (左中右)</li><li>inorder （中左右)</li><li>postorder (左右中)  </li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        print(tree.val)</span><br><span class="line">        preorder(tree.left)</span><br><span class="line">        preorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        inorder(tree.left)</span><br><span class="line">        print(tree.val)</span><br><span class="line">        inorder(tree.right)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree:</span><br><span class="line">        postorder(tree.left)</span><br><span class="line">        postorder(tree.right)</span><br><span class="line">        print(tree.val)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        visit(val)</span><br><span class="line">        <span class="keyword">left</span>?.preOrder(visit: visit)</span><br><span class="line">        <span class="keyword">right</span>?.preOrder(visit: visit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">inOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">left</span>?.inOrder(visit: visit)</span><br><span class="line">        visit(val)</span><br><span class="line">        <span class="keyword">right</span>?.inOrder(visit: visit)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">postOrder</span><span class="params">(visit: <span class="params">(Element)</span></span></span> -&gt; ()) &#123;</span><br><span class="line">        <span class="keyword">left</span>?.postOrder(visit: visit)</span><br><span class="line">        <span class="keyword">right</span>?.postOrder(visit: visit)</span><br><span class="line">        visit(val)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="binary-search-tree-BST-二叉查找树"><a href="#binary-search-tree-BST-二叉查找树" class="headerlink" title="binary search tree (BST) 二叉查找树"></a>binary search tree (BST) 二叉查找树</h4><blockquote><p>math.floor(logn) &lt;= h &lt;= n-1<br>fast lookup, addition, and removal operations: O(logn)</p></blockquote><ul><li>value of left child less than its parent</li><li>value of right child greater than or equal to its parent</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, visit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.left:</span><br><span class="line">            self.left.inorder(visit)</span><br><span class="line">        visit(self.val)</span><br><span class="line">        <span class="keyword">if</span> self.right:</span><br><span class="line">            self.right.inorder(visit)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        min = self</span><br><span class="line">        <span class="keyword">while</span> min.left:</span><br><span class="line">            min = min.left</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">diagram</span><span class="params">(node, top=<span class="string">""</span>, root=<span class="string">""</span>, bottom=<span class="string">""</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> root + <span class="string">"None\n"</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">return</span> (diagram(node.right, top + <span class="string">' '</span>, top + <span class="string">'┌──'</span>, top + <span class="string">'│ '</span>)</span><br><span class="line">                   + root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">                   + diagram(node.left, bottom + <span class="string">'│ '</span>, bottom + <span class="string">'└──'</span>, bottom + <span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">return</span> diagram(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__insert(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> BinaryTreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__insert(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__insert(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contain</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        current = self.root</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="keyword">if</span> current.val == val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> val &lt; current.val:</span><br><span class="line">                current = current.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.right</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__remove(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> val == node.val:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                <span class="keyword">return</span> node.right</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                <span class="keyword">return</span> node.left</span><br><span class="line">            node.val = node.right.get_min().val</span><br><span class="line">            node.right = self.__remove(node.right, node.val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__remove(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__remove(node.right, val)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, root, visit)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            self.inorder(root.left, visit)</span><br><span class="line">            visit(root.val)</span><br><span class="line">            self.inorder(root.right, visit)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.root)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Element</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">BinaryTreeNode</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(value: <span class="type">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.val = value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the min node of the BTS</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">min</span>: <span class="type">BinaryTreeNode</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">left</span>?.<span class="built_in">min</span> ?? <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinaryTreeNode</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// same as extension in binary tree</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">Element</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> root: <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt;?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> val: Element)</span></span> &#123;</span><br><span class="line">        root = insert(from: root, val: val)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(from node: BinaryTreeNode&lt;Element&gt;?, val: Element)</span></span> -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">BinaryTreeNode</span>(value: val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val &#123;</span><br><span class="line">            node.<span class="keyword">left</span> = insert(from: node.<span class="keyword">left</span>, val: val)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="keyword">right</span> = insert(from: node.<span class="keyword">right</span>, val: val)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> value: Element)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> current = root</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> node = current &#123;</span><br><span class="line">            <span class="keyword">if</span> node.val == value &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> value &lt; node.val &#123;</span><br><span class="line">                current = node.<span class="keyword">left</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current = node.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> value: Element)</span></span> &#123;</span><br><span class="line">        root = remove(node: root, value: value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(node: BinaryTreeNode&lt;Element&gt;?, value: Element)</span></span> -&gt; <span class="type">BinaryTreeNode</span>&lt;<span class="type">Element</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> node = node <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> value == node.val &#123;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">left</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> node.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node.<span class="keyword">right</span> == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> node.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            node.val = node.<span class="keyword">right</span>!.<span class="built_in">min</span>.val</span><br><span class="line">            node.<span class="keyword">right</span> = remove(node: node.<span class="keyword">right</span>, value: node.val)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> value &lt; node.val &#123;</span><br><span class="line">            node.<span class="keyword">left</span> = remove(node: node.<span class="keyword">left</span>, value: value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.<span class="keyword">right</span> = remove(node: node.<span class="keyword">right</span>, value: value)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">BinarySearchTree</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root?.description ?? <span class="string">"empty tree"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AVL-Tree"><a href="#AVL-Tree" class="headerlink" title="AVL Tree"></a>AVL Tree</h4><blockquote><p>self-balancing binary search tree</p></blockquote><ul><li>Rotations<ul><li>left</li><li>right-left</li><li>right</li><li>left-right</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">__author__ = <span class="string">'Min'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.val = value</span><br><span class="line">        self.left = <span class="keyword">None</span></span><br><span class="line">        self.right = <span class="keyword">None</span></span><br><span class="line">        self.height = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        min = self</span><br><span class="line">        <span class="keyword">while</span> min.left:</span><br><span class="line">            min = min.left</span><br><span class="line">        <span class="keyword">return</span> min</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_balanceFactor</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.get_left_height() - self.get_right_height()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_left_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.left.height <span class="keyword">if</span> self.left <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_right_height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.right.height <span class="keyword">if</span> self.right <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">diagram</span><span class="params">(node, top=<span class="string">""</span>, root=<span class="string">""</span>, bottom=<span class="string">""</span>)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> root + <span class="string">"None\n"</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">            <span class="keyword">return</span> (diagram(node.right, top + <span class="string">' '</span>, top + <span class="string">'┌──'</span>, top + <span class="string">'│ '</span>)</span><br><span class="line">                   + root + str(node.val) + <span class="string">'\n'</span></span><br><span class="line">                   + diagram(node.left, bottom + <span class="string">'│ '</span>, bottom + <span class="string">'└──'</span>, bottom + <span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">return</span> diagram(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__insert(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> AVLTreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__insert(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__insert(node.right, val)</span><br><span class="line">        balanced_node = self.balanced(node)</span><br><span class="line">        balanced_node.height = max(balanced_node.get_left_height(),</span><br><span class="line">                                   balanced_node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> balanced_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        pivot = node.right</span><br><span class="line">        node.right = pivot.left</span><br><span class="line">        pivot.left = node</span><br><span class="line">        node.height = max(node.get_left_height(), node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        pivot.height = max(pivot.get_left_height(), pivot.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        pivot = node.left</span><br><span class="line">        node.left = pivot.right</span><br><span class="line">        pivot.right = node</span><br><span class="line">        node.height = max(node.get_left_height(), node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        pivot.height = max(pivot.get_left_height(), pivot.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">right_left_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.right:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        node.right = self.right_rotate(node.right)</span><br><span class="line">        <span class="keyword">return</span> self.left_rotate(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">left_right_rotate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left:</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        node.left = self.left_rotate(node.left)</span><br><span class="line">        <span class="keyword">return</span> self.right_rotate(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balanced</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node.get_balanceFactor() == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.get_balanceFactor() == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> self.left_right_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.right_rotate(node)</span><br><span class="line">        <span class="keyword">if</span> node.get_balanceFactor() == <span class="number">-2</span>:</span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.get_balanceFactor() == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> self.right_left_rotate(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.left_rotate(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contain</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        current = self.root</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="keyword">if</span> current.val == val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> val &lt; current.val:</span><br><span class="line">                current = current.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                current = current.right</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.root = self.__remove(self.root, val)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span><span class="params">(self, node, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> val == node.val:</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> node.left) <span class="keyword">and</span> (<span class="keyword">not</span> node.right):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                <span class="keyword">return</span> node.right</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                <span class="keyword">return</span> node.left</span><br><span class="line">            node.val = node.right.get_min().val</span><br><span class="line">            node.right = self.__remove(node.right, node.val)</span><br><span class="line">        <span class="keyword">elif</span> val &lt; node.val:</span><br><span class="line">            node.left = self.__remove(node.left, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.right = self.__remove(node.right, val)</span><br><span class="line">        balanced_node = self.balanced(node)</span><br><span class="line">        balanced_node.height = max(balanced_node.get_left_height(),</span><br><span class="line">                                   balanced_node.get_right_height()) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> balanced_node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.root)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">leftRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> pivot = node.<span class="keyword">right</span>!</span><br><span class="line">        node.<span class="keyword">right</span> = pivot.<span class="keyword">left</span></span><br><span class="line">        pivot.<span class="keyword">left</span> = node</span><br><span class="line">        node.height = <span class="built_in">max</span>(node.leftHeight, node.rightHeight) + <span class="number">1</span></span><br><span class="line">        pivot.height = <span class="built_in">max</span>(pivot.leftHeight, pivot.rightHeight) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pivot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rightRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = node.<span class="keyword">left</span>!</span><br><span class="line">    node.<span class="keyword">left</span> = pivot.<span class="keyword">right</span></span><br><span class="line">    pivot.<span class="keyword">right</span> = node</span><br><span class="line">    node.height = <span class="built_in">max</span>(node.leftHeight, node.rightHeight) + <span class="number">1</span></span><br><span class="line">    pivot.height = <span class="built_in">max</span>(pivot.leftHeight, pivot.rightHeight) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pivot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">rightLeftRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    node.<span class="keyword">right</span> = rightRotate(<span class="keyword">right</span>)</span><br><span class="line">    <span class="keyword">return</span> leftRotate(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">leftRightRotate</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    node.<span class="keyword">left</span> = leftRotate(<span class="keyword">left</span>)</span><br><span class="line">    <span class="keyword">return</span> rightRotate(node)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">balanced</span><span class="params">(<span class="number">_</span> node: AVLNode&lt;Element&gt;)</span></span> -&gt; <span class="type">AVLNode</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> node.balanceFactor &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">left</span> = node.<span class="keyword">left</span>, <span class="keyword">left</span>.balanceFactor == -<span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRightRotate(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rightRotate(node)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">right</span> = node.<span class="keyword">right</span>, <span class="keyword">right</span>.balanceFactor == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rightLeftRotate(node)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> leftRotate(node)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Brute-Force-蛮力法"><a href="#Brute-Force-蛮力法" class="headerlink" title="Brute Force 蛮力法"></a>Brute Force 蛮力法</h2><h3 id="selection-sort-选择排序"><a href="#selection-sort-选择排序" class="headerlink" title="selection sort 选择排序"></a>selection sort 选择排序</h3><p>{<strong>无论什么情况排序速度一样快</strong>}</p><ul><li>从第一个元素开始从它之后找最小的元素与之交换.</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n^2)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list) - <span class="number">1</span>):</span><br><span class="line">        min_num = list[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(list)):</span><br><span class="line">            min_num = min(min_num, list[j])</span><br><span class="line">        list[list[i:].index(min_num) + i], list[i] = list[i], min_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="bubble-sort-冒泡排序"><a href="#bubble-sort-冒泡排序" class="headerlink" title="bubble sort 冒泡排序"></a>bubble sort 冒泡排序</h3><p>{<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>比较相邻元素并将最大的元素向后沉直到最后，重复这个步骤</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort_upgrade</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list) - <span class="number">1</span>):</span><br><span class="line">        already_sorted = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(list) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> list[j] &gt; list[j + <span class="number">1</span>]:</span><br><span class="line">                list[j], list[j + <span class="number">1</span>] = list[j + <span class="number">1</span>], list[j]</span><br><span class="line">                already_sorted = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> already_sorted:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="sequential-search-顺序查找-线性算法"><a href="#sequential-search-顺序查找-线性算法" class="headerlink" title="sequential search 顺序查找 线性算法"></a>sequential search 顺序查找 线性算法</h3><ul><li>Time complexity: {Average: Θ(n), Worse: O(n), Best: Ω(1)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search</span><span class="params">(list, k)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, ele <span class="keyword">in</span> enumerate(list):</span><br><span class="line">        <span class="keyword">if</span> ele == k:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="dfs-深度优先查找"><a href="#dfs-深度优先查找" class="headerlink" title="dfs 深度优先查找"></a>dfs 深度优先查找</h3><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, stack, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        vertex = stack.pop()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + stack:</span><br><span class="line">                stack.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure><h3 id="bfs-广度优先查找"><a href="#bfs-广度优先查找" class="headerlink" title="bfs 广度优先查找"></a>bfs 广度优先查找</h3><ul><li>Time complexity: O(|V|+|E|) = O(b^{d})</li><li>Space complexity: O(|V|) = O(b^{d})  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(graph, start)</span>:</span></span><br><span class="line">    visited, queue, count = [], [start], <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        vertex = queue.pop(<span class="number">0</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        visited.append(vertex)</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> visited + queue:</span><br><span class="line">                queue.append(v)</span><br><span class="line">    <span class="keyword">return</span> visited, count</span><br></pre></td></tr></table></figure><h2 id="Decrease-And-Conquer-减治法"><a href="#Decrease-And-Conquer-减治法" class="headerlink" title="Decrease-And-Conquer 减治法"></a>Decrease-And-Conquer 减治法</h2><h3 id="insertion-sort-插入排序"><a href="#insertion-sort-插入排序" class="headerlink" title="insertion sort 插入排序"></a>insertion sort 插入排序</h3><p>{<strong>对于差不多排好序的速度很快，可以到达Ω(n)</strong>}</p><ul><li>从第二个元素开始向前找到正确的位置插入</li><li>Time complexity: {Average: Θ(n^2), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insetion_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        insert_num = list[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> list[j] &gt; insert_num:</span><br><span class="line">            list[j + <span class="number">1</span>] = list[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        list[j+ <span class="number">1</span>] = insert_num</span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="shell-sort-希尔排序"><a href="#shell-sort-希尔排序" class="headerlink" title="shell sort 希尔排序"></a>shell sort 希尔排序</h3><ul><li>通过一个gap来左插入排序(常用方法是从len/2gap开始每次缩小2倍)</li><li>Time complexity: {Average: Θ(n(logn)^2), Worse: O(n(logn)^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    gap = len(list) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(list)):</span><br><span class="line">            temp = list[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> list[j - gap] &gt; temp:</span><br><span class="line">                list[j], list[j - gap] = list[j - gap], temp</span><br><span class="line">                j -= gap</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> list</span><br></pre></td></tr></table></figure><h3 id="generating-permutations"><a href="#generating-permutations" class="headerlink" title="generating permutations"></a>generating permutations</h3><ul><li>JohnsonTrotter<ul><li>Time complexity: O(n!)<!-- TODO --></li></ul></li></ul><h3 id="binary-search-折半查找"><a href="#binary-search-折半查找" class="headerlink" title="binary search 折半查找"></a>binary search 折半查找</h3><ul><li>Time complexity: {Average: Θ(logn), Worse: O(logn), Best: Ω(1)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(sorted_list, target)</span>:</span></span><br><span class="line">    low, high = <span class="number">0</span>, len(sorted_list) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> sorted_list[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> sorted_list[mid] &gt; target:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="quick-select-快速选择"><a href="#quick-select-快速选择" class="headerlink" title="quick select 快速选择"></a>quick select 快速选择</h3><ul><li>寻找第k个最小元素,通过划分来实现</li><li>Time complexity: {Average: Θ(n), Worse: O(n^2), Best: Ω(n)}</li><li>Space complexity: O(1)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_select_m</span><span class="params">(list, start, end, k_th_min)</span>:</span></span><br><span class="line">    s = partition(list, start, end)</span><br><span class="line">    <span class="keyword">if</span> s == k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> list[s]</span><br><span class="line">    <span class="keyword">elif</span> s &gt; k_th_min - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, start, s - <span class="number">1</span>, k_th_min)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> quick_select_m(list, s + <span class="number">1</span>, end, k_th_min)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h2 id="Divide-And-Conquer-分治法"><a href="#Divide-And-Conquer-分治法" class="headerlink" title="Divide-And-Conquer 分治法"></a>Divide-And-Conquer 分治法</h2><p>分解问题，求解子问题，合并自问题的解<br>T(n) = aT(n/b) + f(n) {a个需要求解的问题，问题被分成b个，f(n)的分解合并时间消耗}<br>T(n) = <code>O(n^d) if a &lt; b^d</code> or <code>O(n^dlogn) if a = b^d</code> or <code>O(n^log_b(a)) if a &gt; b^d</code></p><h3 id="merge-sort-归并排序"><a href="#merge-sort-归并排序" class="headerlink" title="merge sort 归并排序"></a>merge sort 归并排序</h3><p>{<strong>除了heapsort以外唯一BestAveWorst全是O(nlogn)排序算法</strong>}</p><ul><li>两种实现方法(自顶向下-递归， 自底向上-循环)</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(n)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(list) &gt; <span class="number">1</span>:</span><br><span class="line">        list_b = list[:len(list) // <span class="number">2</span>]</span><br><span class="line">        list_c = list[len(list) // <span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">return</span> merge(merge_sort(list_b), merge_sort(list_c))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(list_b, list_c)</span>:</span></span><br><span class="line">    list_a = list_b + list_c    <span class="comment">#init list_a</span></span><br><span class="line">    i, j, k = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(list_b) <span class="keyword">and</span> j &lt; len(list_c):</span><br><span class="line">        <span class="keyword">if</span> list_b[i] &lt;= list_c[j]:</span><br><span class="line">            list_a[k] = list_b[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list_a[k] = list_c[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == len(list_b):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(j, len(list_c)):</span><br><span class="line">            list_a[k] = list_c[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j == len(list_c):</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(i, len(list_b)):</span><br><span class="line">            list_a[k] = list_b[index]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> list_a</span><br></pre></td></tr></table></figure><h3 id="quick-sort-快速排序"><a href="#quick-sort-快速排序" class="headerlink" title="quick sort 快速排序"></a>quick sort 快速排序</h3><p>{<strong>pivot的选择对于算法效率至关重要</strong>}</p><ul><li>不断选择pivot来将元素划分到它的左右来实现</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(n^2), Best: Ω(nlogn)}</li><li>Space complexity: {O(nlogn)}</li><li>pivot每次选第一个在已经排好序的数组上时间效率是O(n^2)<ul><li>优化方法<ul><li>使用随机pivot, 平均划分pivot, 快排好后使用插入排序  </li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_m</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        pivot = partition(list, start, end)</span><br><span class="line">        quick_sort_m(list, start, pivot - <span class="number">1</span>)</span><br><span class="line">        quick_sort_m(list, pivot + <span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(list, start, end)</span>:</span></span><br><span class="line">    pivot = list[start]</span><br><span class="line">    i = start + <span class="number">1</span></span><br><span class="line">    j = end</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">while</span> list[i] &lt;= pivot <span class="keyword">and</span> i &lt;= j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> list[j] &gt;= pivot <span class="keyword">and</span> j &gt;= i:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; j:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        list[i], list[j] = list[j], list[i]</span><br><span class="line">    list[start], list[j] = list[j], list[start]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><h2 id="Transform-And-Conquer-变治法"><a href="#Transform-And-Conquer-变治法" class="headerlink" title="Transform-And-Conquer 变治法"></a>Transform-And-Conquer 变治法</h2><ul><li>预排序解决问题<ul><li>检查数组中元素的唯一性</li><li>算法数组的模式 （一个数组中最多的元素)</li></ul></li></ul><h3 id="heap-sort-堆排序"><a href="#heap-sort-堆排序" class="headerlink" title="heap sort 堆排序"></a>heap sort 堆排序</h3><ul><li>先构建一个堆, 不断的删除最大键，</li><li>Time complexity: {Average: Θ(nlogn), Worse: O(nlogn), Best: Ω(nlogn)}</li><li>Space complexity: {O(1)}  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(list)</span>:</span></span><br><span class="line">    heapq.heapify(list)</span><br><span class="line">    <span class="keyword">return</span> [heapq.heappop(list) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list))]</span><br></pre></td></tr></table></figure><h3 id="problem-reduction-问题简化"><a href="#problem-reduction-问题简化" class="headerlink" title="problem reduction 问题简化"></a>problem reduction 问题简化</h3><p>{已有一种方法求其他问题}</p><ul><li>lcm(m, n) <em> gcd(m, n) = m </em> n {lcm: 最小公倍数, gcd: 最大公约数}</li><li>求一个函数的最小值， 可以求一个函数负函数的最大值的负数</li></ul><h3 id="hash-table-散列表"><a href="#hash-table-散列表" class="headerlink" title="hash table 散列表"></a>hash table 散列表</h3><ul><li>需要把键在hash table 中尽可能均匀分布</li><li>平均插入，删除， 查找效率都是 O(1), 当最坏情况全部冲突到一个位置时候，退化到 O(n)</li><li>open hasing, also: separate chaining 分离链 开hash</li><li>closed hashing 闭hash</li><li>double hashing</li><li>rehasing</li></ul><h3 id="B-tree-B树"><a href="#B-tree-B树" class="headerlink" title="B-tree B树"></a>B-tree B树</h3><!-- TODO --><h2 id="Dynamic-Programming-DP-动态规划"><a href="#Dynamic-Programming-DP-动态规划" class="headerlink" title="Dynamic Programming (DP) 动态规划"></a>Dynamic Programming (DP) 动态规划</h2><ul><li>与其对交叠的子问题一次又一次地求解，还不如对每个较小的子问题只求解一次并把结果记录在表中。 (对具有交叠子问题的问题进行求解的技术)<ul><li>类似斐波那契数</li></ul></li></ul><h3 id="coins-row-problem-求互不相临的最大金币总金额"><a href="#coins-row-problem-求互不相临的最大金币总金额" class="headerlink" title="coins_row problem (求互不相临的最大金币总金额)"></a>coins_row problem (求互不相临的最大金币总金额)</h3><ul><li>Time complexity: O(n), Space complexity: O(n)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coin_row</span><span class="params">(coins)</span>:</span></span><br><span class="line">    coin1, coin2 = coins[<span class="number">0</span>], coins[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i, coin <span class="keyword">in</span> enumerate(coins[<span class="number">2</span>:]):</span><br><span class="line">        coin1, coin2 = coin2, max(coin1 + coin, coin2)</span><br><span class="line">    <span class="keyword">return</span> coin2</span><br></pre></td></tr></table></figure><h3 id="change-making-problem"><a href="#change-making-problem" class="headerlink" title="change_making problem"></a>change_making problem</h3><ul><li>Time complexity: O(mn), Space complexity: O(n)  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_making</span><span class="params">(coins, change)</span>:</span></span><br><span class="line">    count = [<span class="number">0</span>] * change</span><br><span class="line">    count[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, change):</span><br><span class="line">        tmp = float(<span class="string">'inf'</span>)</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= len(coins) <span class="keyword">and</span> j &lt; len(coins) <span class="keyword">and</span> i &gt;= coins[j]:</span><br><span class="line">            tmp = min(count[i - coins[j]], tmp)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        count[i] = tmp + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="knapsack-problem-背包问题"><a href="#knapsack-problem-背包问题" class="headerlink" title="knapsack problem 背包问题"></a>knapsack problem 背包问题</h3><ul><li>Time complexity: O(nW), Space complexity: O(nW)</li><li>#TODO</li></ul><h3 id="memory-function-记忆功能"><a href="#memory-function-记忆功能" class="headerlink" title="memory function 记忆功能"></a>memory function 记忆功能</h3><p>TODO</p><h2 id="Greedy-Technique-贪婪技术"><a href="#Greedy-Technique-贪婪技术" class="headerlink" title="Greedy Technique 贪婪技术"></a>Greedy Technique 贪婪技术</h2><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><ul><li>构造最小生成树算法</li><li>先随机选一个点，每次扩展新的点使得这个新的点到已有点的距离最短，直到添加完所有顶点  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><ul><li>构造最小生成树算法</li><li>先按照权重将边进行排序，然后不断把边加入子图，如果加入此边会产生回路，则天国，直到完成  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><ul><li>单起点最短路径问题  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TODO (heaven)</span></span><br></pre></td></tr></table></figure><h2 id="Bit-Operation"><a href="#Bit-Operation" class="headerlink" title="Bit Operation"></a>Bit Operation</h2><ul><li>get bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_git_i_1</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num &amp; (<span class="number">1</span> &lt;&lt; i) != <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>set bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_bit</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num | (<span class="number">1</span> &lt;&lt; i)</span><br></pre></td></tr></table></figure><ul><li>clear bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_bit</span><span class="params">(num, i)</span>:</span></span><br><span class="line">    mask = ~(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> num &amp; mask</span><br></pre></td></tr></table></figure><ul><li>update bit  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bit</span><span class="params">(num, i, v)</span>:</span></span><br><span class="line">    mask = ~(<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">    <span class="keyword">return</span> (num &amp; mask) | (v &lt;&lt; i)</span><br></pre></td></tr></table></figure><h2 id="How-To-Optimaize-the-Algorithm"><a href="#How-To-Optimaize-the-Algorithm" class="headerlink" title="How To Optimaize the Algorithm"></a>How To Optimaize the Algorithm</h2><ul><li><p>Optimaize &amp; Solve Technique</p><ul><li>Look for <strong>BUD</strong><ul><li>Bottlenecks</li><li>Unnecessary work</li><li>Duplicated work</li></ul></li><li>DIY (Do It Yourself)</li><li>Simplify and Generalize</li><li><p>Base Case and Build (always use for recursion)</p><ul><li>like for generate permutations<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 Case &quot;a&quot; --&gt; &#123;&quot;a&quot;&#125;</span><br><span class="line">2 Case &quot;ab&quot; --&gt; &#123;&quot;ab&quot;, &quot;ba&quot;&#125;</span><br><span class="line">3 Case &quot;abc&quot; --&gt; &#123;&quot;cab&quot;, &quot;acb&quot;, &quot;abc&quot;, &quot;cba&quot;, &quot;bca&quot;, bac&quot;&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Data structure brainstorm</p><ul><li>hash</li><li>heap</li><li>tree</li></ul></li></ul></li><li><p>Consider the <strong>BCR</strong> (Best Conceivable Runtime)</p><ul><li>The BCR is the best runtime you could conceive of a solution to a problem having.You can easily prove that there is no way you could beat the BCR.</li></ul></li><li><p>Good coding looks like</p><ul><li>correct</li><li>efficient</li><li>simple</li><li>readable</li><li>maintainable<ul><li>use data structures generously</li><li>appropriate code resue</li><li>modular</li><li>flexible and robust</li><li>error checking</li></ul></li></ul></li></ul><h2 id="Power-Table-of-2"><a href="#Power-Table-of-2" class="headerlink" title="Power Table of 2"></a>Power Table of 2</h2><table><thead><tr><th>2^</th><th>=</th><th>approximation</th><th>approximate to</th></tr></thead><tbody><tr><td>7</td><td>128</td><td></td><td></td></tr><tr><td>8</td><td>256</td><td></td><td></td></tr><tr><td>10</td><td>1024</td><td>one thousand</td><td>1K</td></tr><tr><td>16</td><td>65536</td><td></td><td>64K</td></tr><tr><td>20</td><td>1048576</td><td>one million</td><td>1MB</td></tr><tr><td>30</td><td>1073741824</td><td>one billion</td><td>1GB</td></tr><tr><td>32</td><td>4294967296</td><td></td><td>4GB</td></tr><tr><td>40</td><td>1099511627776</td><td>one trillion</td><td>1TB</td></tr></tbody></table><hr><p>Author: <code>Min Gao</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算法与数据结构汇总&lt;/p&gt;
&lt;h2 id=&quot;Big-O-Concept&quot;&gt;&lt;a href=&quot;#Big-O-Concept&quot; class=&quot;headerlink&quot; title=&quot;Big-O Concept&quot;&gt;&lt;/a&gt;Big-O Concept&lt;/h2&gt;&lt;p&gt;{O 上界} {Ω
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
    
      <category term="algorithm" scheme="heavenmin.com/tags/algorithm/"/>
    
      <category term="python" scheme="heavenmin.com/tags/python/"/>
    
      <category term="data-structure" scheme="heavenmin.com/tags/data-structure/"/>
    
      <category term="swift" scheme="heavenmin.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Syntax</title>
    <link href="heavenmin.com/post/42d6409f/"/>
    <id>heavenmin.com/post/42d6409f/</id>
    <published>2016-05-29T23:38:13.000Z</published>
    <updated>2018-08-16T05:31:42.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Heads"><a href="#Heads" class="headerlink" title="Heads"></a>Heads</h2><p>H2 Tag <code>## Title</code><br>H3 Tag <code>### Title</code></p><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><p><em>italic</em>  <code>*italic*</code><br><em>italic</em>  <code>_italic_</code><br><strong>bold</strong>  <code>**bold**</code><br><strong>bold</strong>  <code>__bold__</code><br><del>Strikethrough</del>  <code>~~Strikethrough~~</code>  </p><h2 id="Unordered-lists"><a href="#Unordered-lists" class="headerlink" title="Unordered lists"></a>Unordered lists</h2><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b<ul><li>item 2b1</li></ul></li></ul></li><li>Item 3  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Item 1</span><br><span class="line"><span class="bullet">* </span>Item 2</span><br><span class="line"><span class="code">    * Item 2a</span></span><br><span class="line"><span class="code">    * Item 2b</span></span><br><span class="line"><span class="code">        * item 2b1</span></span><br><span class="line"><span class="bullet">* </span>Item 3</span><br></pre></td></tr></table></figure><h2 id="Ordered-lists"><a href="#Ordered-lists" class="headerlink" title="Ordered lists"></a>Ordered lists</h2><ol><li>first</li></ol><ul><li>second<ol><li>1</li></ol><ul><li>2</li></ul></li><li>third  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>first</span><br><span class="line"><span class="bullet">* </span>second</span><br><span class="line"><span class="code">    1. 1</span></span><br><span class="line"><span class="code">    * 2</span></span><br><span class="line"><span class="bullet">* </span>third</span><br></pre></td></tr></table></figure><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p><img src="https://octodex.github.com/images/yaktocat.png" style="zoom:30%">  </p><p>Inline link: <code>![Text](url &quot;Optional title&quot;)</code><br>reference link: <code>![id]: url &quot;Optional title&quot;</code> <code>![Text][id]</code><br>Control size: <code>&lt;img src=&quot;url&quot; style=&quot;zoom:30%&quot; /&gt;</code></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><p><a href="http://github.com" target="_blank" rel="noopener">GitHub</a><br>Inline link: <code>[Text](url &quot;Optional title&quot;)</code><br>Reference link: <code>[id]: url &quot;Optional title&quot;</code> <code>[Text][id]</code></p><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><p>As kanye said:</p><blockquote><p>This is a Blockquotes</p><blockquote><p>This is nested blockquote</p><blockquote><p>This is nested nested blockquote  </p></blockquote></blockquote></blockquote><p><code>&gt; content</code><br><code>&gt; &gt; nested conteng</code><br><code>&gt; &gt; &gt; nested nested content</code></p><h2 id="Inline-code"><a href="#Inline-code" class="headerlink" title="Inline code"></a>Inline code</h2><p>you can use <code>&lt;TAB&gt;</code>(4 space) to insert a code</p><pre><code>write code here</code></pre><h2 id="Syntax-highlighting"><a href="#Syntax-highlighting" class="headerlink" title="Syntax highlighting"></a>Syntax highlighting</h2><p>for code <code>python</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delURL</span><span class="params">(text)</span>:</span></span><br><span class="line">  text = re.sub(<span class="string">r"http\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  text = re.sub(<span class="string">r"@\S+"</span>, <span class="string">""</span>, text)</span><br><span class="line">  <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure></p><p>```python<br>code here<br>```</p><h2 id="Task-lists"><a href="#Task-lists" class="headerlink" title="Task lists"></a>Task lists</h2><ul><li style="list-style: none"><input type="checkbox"> need to do 1</li><li style="list-style: none"><input type="checkbox" checked> already do  </li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] need to do 1</span><br><span class="line"><span class="bullet">- </span>[x] already do</span><br></pre></td></tr></table></figure><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>cell1</td><td>cell2</td></tr><tr><td>cell3</td><td>cell4</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header</span><br><span class="line">--           | --</span><br><span class="line">cell1        | cell2</span><br><span class="line">cell3        | cell4</span><br></pre></td></tr></table></figure><h2 id="Videos"><a href="#Videos" class="headerlink" title="Videos"></a>Videos</h2><div class="video-container"><iframe src="//www.youtube.com/embed/zXOIiAQ-4GI" frameborder="0" allowfullscreen></iframe></div>  <hr><p>Author: Min</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Heads&quot;&gt;&lt;a href=&quot;#Heads&quot; class=&quot;headerlink&quot; title=&quot;Heads&quot;&gt;&lt;/a&gt;Heads&lt;/h2&gt;&lt;p&gt;H2 Tag &lt;code&gt;## Title&lt;/code&gt;&lt;br&gt;H3 Tag &lt;code&gt;### Title&lt;/co
      
    
    </summary>
    
      <category term="computer science" scheme="heavenmin.com/categories/computer-science/"/>
    
      <category term="language" scheme="heavenmin.com/categories/computer-science/language/"/>
    
    
      <category term="markdown" scheme="heavenmin.com/tags/markdown/"/>
    
  </entry>
  
</feed>
